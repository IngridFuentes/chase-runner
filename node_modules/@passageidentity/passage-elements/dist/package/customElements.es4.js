var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import { d as defineComponent, f as ref, af as watchEffect, ag as onUnmounted, _ as _export_sfc, o as openBlock, b as createBlock, e as withCtx, c as createElementBlock, a as createBaseVNode, n as normalizeClass, t as toDisplayString, r as renderSlot, q as withModifiers, z as createCommentVNode, ad as withKeys, O as Transition, h as useLocale, j as computed, V as useAddDevice, P as G, ab as resolveComponent, u as unref, G as InlineSvg, I as Icons, H as useTheme, T as Theme, W, i as usePassage, g as watch, w as withDirectives, x as vModelText, L as Fragment, ah as h, E as createVNode, Z as Dropdown, K as renderList, k as onMounted, y as normalizeStyle, p as createTextVNode, aa as dayjs, ac as he, a3 as onBeforeUpdate, a4 as useStoreLocale, a5 as useThemeSetup, a6 as useIntlTelInput, a7 as createPassageInstance, N as useDefaultCountryCode } from "./customElements.es.js";
const _sfc_main$9 = defineComponent({
  name: "Modal",
  props: {
    active: {
      type: Boolean,
      default: false
    },
    title: {
      type: String,
      default: ""
    },
    onPrimaryButton: {
      type: Function,
      required: false
    },
    onCancelButton: {
      type: Function,
      required: false
    },
    primaryButtonText: {
      type: String,
      default: "OK"
    },
    cancelButtonText: {
      type: String,
      default: "Cancel"
    },
    info: {
      type: Boolean,
      default: false
    },
    cancelOnly: {
      type: Boolean,
      default: false
    },
    danger: {
      type: Boolean,
      default: false
    },
    centerTitle: {
      type: Boolean,
      default: false
    }
  },
  setup(props, context) {
    const isActive = ref(false);
    watchEffect(() => {
      isActive.value = props.active;
      if (isActive.value) {
        document.documentElement.classList.add("is-clipped");
      } else {
        document.documentElement.classList.remove("is-clipped");
      }
    });
    const closeModal = () => {
      isActive.value = false;
    };
    function primaryAction() {
      if (props.onPrimaryButton === void 0) {
        context.emit("update:active", false);
        return;
      }
      props.onPrimaryButton().then((closeDialog) => {
        if (closeDialog) {
          context.emit("update:active", false);
        }
      });
    }
    function cancelAction() {
      if (props.onCancelButton === void 0) {
        context.emit("update:active", false);
        return;
      }
      props.onCancelButton().then(() => {
        context.emit("update:active", false);
      });
    }
    onUnmounted(() => document.documentElement.classList.remove("is-clipped"));
    return {
      isActive,
      closeModal,
      primaryAction,
      cancelAction
    };
  }
});
const _hoisted_1$8 = /* @__PURE__ */ createBaseVNode("div", { class: "passage-modal-background" }, null, -1);
const _hoisted_2$7 = { class: "passage-modal-card" };
const _hoisted_3$6 = {
  key: 0,
  class: "passage-modal-footer"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(Transition, {
    name: "modal",
    mode: "out-in"
  }, {
    default: withCtx(() => [
      _ctx.isActive ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["passage-modal", { "is-active": _ctx.isActive }]),
        part: "modal",
        role: "dialog",
        onKeyup: [
          _cache[2] || (_cache[2] = withKeys((...args) => _ctx.primaryAction && _ctx.primaryAction(...args), ["enter"])),
          _cache[3] || (_cache[3] = withKeys((...args) => _ctx.cancelAction && _ctx.cancelAction(...args), ["esc"]))
        ]
      }, [
        _hoisted_1$8,
        createBaseVNode("div", _hoisted_2$7, [
          createBaseVNode("div", {
            class: normalizeClass(["title secondary-title", { "danger-header": _ctx.danger, "has-text-centered": _ctx.centerTitle }])
          }, toDisplayString(_ctx.title), 3),
          createBaseVNode("div", {
            class: normalizeClass(["passage-modal-body", { centered: _ctx.centerTitle }])
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2),
          !_ctx.info || !_ctx.cancelOnly ? (openBlock(), createElementBlock("div", _hoisted_3$6, [
            !_ctx.cancelOnly ? (openBlock(), createElementBlock("button", {
              key: 0,
              class: "button is-modal",
              part: "modal-button modal-primary",
              onClick: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.primaryAction && _ctx.primaryAction(...args), ["prevent"])),
              "data-test": "primary-modal-button"
            }, toDisplayString(_ctx.primaryButtonText), 1)) : createCommentVNode("", true),
            !_ctx.info ? (openBlock(), createElementBlock("button", {
              key: 1,
              class: normalizeClass(["button is-secondary is-modal cancel-button", { "cancel-only": _ctx.cancelOnly }]),
              part: "modal-button modal-secondary",
              onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.cancelAction && _ctx.cancelAction(...args), ["prevent"])),
              "data-test": "secondary-modal-button"
            }, toDisplayString(_ctx.cancelButtonText), 3)) : createCommentVNode("", true)
          ])) : createCommentVNode("", true)
        ])
      ], 34)) : createCommentVNode("", true)
    ]),
    _: 3
  });
}
var Modal = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render]]);
const _hoisted_1$7 = { class: "has-text-centered" };
const _hoisted_2$6 = {
  key: 1,
  style: { "margin-bottom": "16px" },
  class: "text is-danger has-text-centered"
};
const _hoisted_3$5 = { key: 2 };
const _hoisted_4$5 = { style: { "margin-bottom": "12px" } };
const _hoisted_5$3 = { style: { "margin-bottom": "22px" } };
const _hoisted_6$3 = {
  key: 3,
  class: "flex-row flex-center"
};
const _hoisted_7$3 = ["onClick", "disabled"];
const _hoisted_8$3 = ["onClick", "disabled"];
const _hoisted_9$2 = {
  key: 4,
  class: "flex-row flex-center"
};
const _hoisted_10$2 = ["onClick", "disabled"];
const _hoisted_11$1 = {
  class: "link has-text-centered",
  style: { "margin-top": "32px" }
};
const _hoisted_12 = ["onClick"];
const _sfc_main$8 = defineComponent({
  __name: "AddDevice",
  props: {
    active: { type: Boolean },
    passkeyFeatures: {}
  },
  emits: ["dialogClose", "update:active"],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const showAddModal = computed({
      get() {
        return props.active;
      },
      set(newValue) {
        emit("update:active", newValue);
      }
    });
    const supportsPlatform = computed(() => {
      var _a, _b;
      return (_b = (_a = props.passkeyFeatures) == null ? void 0 : _a.platform) != null ? _b : false;
    });
    const supportsCrossPlatform = computed(() => {
      var _a, _b;
      return (_b = (_a = props.passkeyFeatures) == null ? void 0 : _a.securityKey) != null ? _b : false;
    });
    const { addDevice, addPending, errorMessage } = useAddDevice();
    const newDevice = ref();
    let previousAttachment = G.Platform;
    function onAddDevice(authenticatorAttachment) {
      return __async(this, null, function* () {
        previousAttachment = authenticatorAttachment;
        newDevice.value = yield addDevice(authenticatorAttachment);
        if (newDevice.value) {
          showAddModal.value = false;
          emit("dialogClose");
          return true;
        }
        return false;
      });
    }
    function primaryAddDevice() {
      if (supportsPlatform.value === true) {
        onAddDevice(G.Platform);
      } else {
        onAddDevice(G.CrossPlatform);
      }
    }
    function secondaryAddDevice() {
      onAddDevice(G.CrossPlatform);
    }
    function tryAgain() {
      onAddDevice(previousAttachment);
    }
    function cancel() {
      errorMessage.value = "";
      showAddModal.value = false;
    }
    return (_ctx, _cache) => {
      const _component_loading = resolveComponent("loading");
      return openBlock(), createBlock(Modal, {
        title: unref(t)("add-passkey"),
        active: showAddModal.value,
        "onUpdate:active": _cache[0] || (_cache[0] = ($event) => showAddModal.value = $event),
        "cancel-only": "",
        info: "",
        "center-title": ""
      }, {
        default: withCtx(() => [
          unref(addPending) ? (openBlock(), createBlock(_component_loading, {
            key: 0,
            active: unref(addPending)
          }, null, 8, ["active"])) : createCommentVNode("", true),
          createBaseVNode("figure", _hoisted_1$7, [
            unref(errorMessage) ? (openBlock(), createBlock(unref(InlineSvg), {
              key: 0,
              style: { "margin-top": "24px" },
              src: unref(Icons).fingerprintFailed,
              alt: "Biometrics scan failed"
            }, null, 8, ["src"])) : (openBlock(), createBlock(unref(InlineSvg), {
              key: 1,
              src: unref(Icons).passkey,
              alt: "Register with a passkey"
            }, null, 8, ["src"]))
          ]),
          unref(errorMessage) ? (openBlock(), createElementBlock("div", _hoisted_2$6, toDisplayString(unref(errorMessage)), 1)) : createCommentVNode("", true),
          !unref(errorMessage) ? (openBlock(), createElementBlock("div", _hoisted_3$5, [
            createBaseVNode("div", _hoisted_4$5, toDisplayString(unref(t)("passkeys-are-a-simple")), 1),
            createBaseVNode("div", _hoisted_5$3, toDisplayString(unref(t)("passkey-register-options")), 1)
          ])) : createCommentVNode("", true),
          !unref(errorMessage) ? (openBlock(), createElementBlock("div", _hoisted_6$3, [
            createBaseVNode("button", {
              onClick: withModifiers(primaryAddDevice, ["prevent"]),
              type: "button",
              part: "button",
              class: "button is-primary",
              disabled: unref(addPending),
              style: { "margin-right": "5px", "width": "auto" },
              "data-test": "add-device-primary-button"
            }, toDisplayString(supportsPlatform.value ? unref(t)("continue") : unref(t)("use-another-device")), 9, _hoisted_7$3),
            supportsPlatform.value && supportsCrossPlatform.value ? (openBlock(), createElementBlock("button", {
              key: 0,
              onClick: withModifiers(secondaryAddDevice, ["prevent"]),
              type: "button",
              part: "button button-secondary",
              class: "button is-secondary",
              disabled: unref(addPending),
              style: { "margin-left": "5px" },
              "data-test": "add-device-secondary-button"
            }, toDisplayString(unref(t)("use-another-device")), 9, _hoisted_8$3)) : createCommentVNode("", true)
          ])) : (openBlock(), createElementBlock("div", _hoisted_9$2, [
            createBaseVNode("button", {
              onClick: withModifiers(tryAgain, ["prevent"]),
              type: "button",
              part: "button",
              class: "button is-primary",
              disabled: unref(addPending),
              style: { "margin-right": "5px", "width": "auto" },
              "data-test": "add-device-primary-button"
            }, toDisplayString(unref(t)("try-again")), 9, _hoisted_10$2)
          ])),
          createBaseVNode("div", _hoisted_11$1, [
            createBaseVNode("a", {
              onClick: withModifiers(cancel, ["prevent"]),
              role: "button",
              "data-test": "add-device-skip"
            }, toDisplayString(unref(t)("cancel")), 9, _hoisted_12)
          ])
        ]),
        _: 1
      }, 8, ["title", "active"]);
    };
  }
});
const _hoisted_1$6 = { class: "profile-table-icon-wrapper" };
const _sfc_main$7 = defineComponent({
  __name: "DeviceIcon",
  props: {
    device: {}
  },
  setup(__props) {
    const props = __props;
    const { theme } = useTheme();
    const getDefaultDeviceIcon = (type) => {
      return type === W.SecurityKey ? Icons.securityKey : Icons.passkey;
    };
    const icon = computed(() => {
      var _a, _b;
      if (!props.device.icons) {
        return getDefaultDeviceIcon(props.device.type);
      } else {
        switch (theme.value) {
          case Theme.Dark:
            return (_a = props.device.icons.dark) != null ? _a : getDefaultDeviceIcon(props.device.type);
          case Theme.Light:
            return (_b = props.device.icons.light) != null ? _b : getDefaultDeviceIcon(props.device.type);
          default:
            return getDefaultDeviceIcon(props.device.type);
        }
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$6, [
        icon.value === "" ? (openBlock(), createBlock(unref(InlineSvg), {
          key: 0,
          class: "profile-table-icon",
          src: unref(Icons).passkey,
          alt: "Device icon",
          fill: "currentColor"
        }, null, 8, ["src"])) : (openBlock(), createBlock(unref(InlineSvg), {
          key: 1,
          class: "profile-table-icon",
          src: icon.value,
          alt: "Device icon",
          fill: "currentColor"
        }, null, 8, ["src"]))
      ]);
    };
  }
});
function useEditDevice() {
  const { t } = useLocale();
  const { passage } = usePassage();
  const passageUser = passage.getCurrentUser();
  const editPending = ref(false);
  const errorMessage = ref("");
  function renameDevice(deviceID, newFriendlyName) {
    return __async(this, null, function* () {
      editPending.value = true;
      try {
        yield passageUser.editDevice(deviceID, { friendly_name: newFriendlyName });
        return true;
      } catch (e) {
        errorMessage.value = t("failed-to-rename-this-device");
        return false;
      } finally {
        editPending.value = false;
      }
    });
  }
  return {
    renameDevice,
    editPending,
    errorMessage
  };
}
const _hoisted_1$5 = { class: "device-name" };
const _hoisted_2$5 = ["onKeyup", "readonly", "data-test"];
const _hoisted_3$4 = { class: "message is-danger" };
const _hoisted_4$4 = { class: "text is-danger" };
const FINISH_EDITING_EVENT = "finish-editing";
const _sfc_main$6 = defineComponent({
  __name: "DeviceName",
  props: {
    device: {},
    selectedDeviceId: {},
    isEditing: { type: Boolean },
    index: {}
  },
  emits: [FINISH_EDITING_EVENT],
  setup(__props, { emit }) {
    const props = __props;
    const MAX_DEVICE_NAME_LENGTH = 64;
    const validationError = ref("");
    const currentDeviceName = ref(props.device.friendly_name);
    const deviceNameInputRef = ref();
    const isEditingDeviceName = computed(() => {
      return props.isEditing && props.device.id === props.selectedDeviceId;
    });
    const { t } = useLocale();
    const { renameDevice, editPending, errorMessage } = useEditDevice();
    function clearErrors() {
      validationError.value = "";
      errorMessage.value = "";
    }
    function handleEditDevice(inputDeviceName, deviceName) {
      return __async(this, null, function* () {
        if (!props.device) {
          emit(FINISH_EDITING_EVENT, false);
          return false;
        }
        if (errorMessage.value) {
          emit(FINISH_EDITING_EVENT, false);
          clearErrors();
          return true;
        }
        if (!inputDeviceName) {
          validationError.value = t("device-name-is-required");
          return false;
        }
        if (inputDeviceName.length > MAX_DEVICE_NAME_LENGTH) {
          validationError.value = t("device-name-maximum");
          return false;
        }
        if (inputDeviceName === deviceName) {
          emit(FINISH_EDITING_EVENT, false);
          return true;
        }
        const result = yield renameDevice(props.device.id, inputDeviceName);
        if (result) {
          emit(FINISH_EDITING_EVENT, false);
          return true;
        }
        return result;
      });
    }
    function save() {
      return __async(this, null, function* () {
        const result = yield handleEditDevice(currentDeviceName.value, props.device.friendly_name);
        if (result) {
          return true;
        }
        return false;
      });
    }
    watch(isEditingDeviceName, (newValue) => {
      if (newValue && props.device.id === props.selectedDeviceId) {
        setTimeout(() => {
          var _a;
          (_a = deviceNameInputRef == null ? void 0 : deviceNameInputRef.value) == null ? void 0 : _a.focus();
        });
      }
    });
    return (_ctx, _cache) => {
      const _component_loading = resolveComponent("loading");
      return openBlock(), createElementBlock(Fragment, null, [
        unref(editPending) ? (openBlock(), createBlock(_component_loading, {
          key: 0,
          active: unref(editPending)
        }, null, 8, ["active"])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_1$5, [
          createBaseVNode("div", null, [
            withDirectives(createBaseVNode("input", {
              ref_key: "deviceNameInputRef",
              ref: deviceNameInputRef,
              type: "text",
              class: normalizeClass(["input short", { readonly: !isEditingDeviceName.value }]),
              part: "input",
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => currentDeviceName.value = $event),
              onInput: clearErrors,
              onBlur: save,
              onKeyup: withKeys(save, ["enter"]),
              readonly: !isEditingDeviceName.value,
              tabindex: "0",
              "data-test": `passkey-table-row-${_ctx.index}-device-name`
            }, null, 42, _hoisted_2$5), [
              [vModelText, currentDeviceName.value]
            ]),
            createBaseVNode("div", _hoisted_3$4, toDisplayString(validationError.value), 1),
            createBaseVNode("div", _hoisted_4$4, toDisplayString(unref(errorMessage)), 1)
          ])
        ])
      ], 64);
    };
  }
});
const _sfc_main$5 = defineComponent({
  name: "Loading",
  props: {
    active: Boolean
  },
  setup(props, { attrs }) {
    return () => props.active ? h(
      Transition,
      {
        name: "fade",
        mode: "out-in"
      },
      () => {
        return [
          h(
            "div",
            __spreadProps(__spreadValues({}, attrs), {
              class: ["component-loading loading-overlay is-overlay"],
              title: "Loading..."
            }),
            [
              h("div", { class: ["loading-background is-overlay"] }, ""),
              h("div", { class: ["loading-icon"] })
            ]
          )
        ];
      }
    ) : null;
  }
});
function useRevokeDevice() {
  const { t } = useLocale();
  const { passage } = usePassage();
  const passageUser = passage.getCurrentUser();
  const revokePending = ref(false);
  const errorMessage = ref("");
  function revokeDevice(device) {
    return __async(this, null, function* () {
      revokePending.value = true;
      try {
        yield passageUser.deleteDevice(device);
        return true;
      } catch (e) {
        errorMessage.value = t("failed-to-revoke-this-device");
        return false;
      } finally {
        revokePending.value = false;
      }
    });
  }
  return {
    revokeDevice,
    revokePending,
    errorMessage
  };
}
const _hoisted_1$4 = {
  key: 0,
  class: "passage-table-paginator"
};
const _hoisted_2$4 = { class: "page-size-selector" };
const _hoisted_3$3 = { style: { "margin-right": "15px" } };
const _hoisted_4$3 = { class: "paginator-text" };
const _hoisted_5$2 = { class: "paginator-buttons flex-row" };
const _hoisted_6$2 = ["onClick"];
const _hoisted_7$2 = ["onClick"];
const _hoisted_8$2 = ["onClick"];
const _hoisted_9$1 = ["onClick"];
const _hoisted_10$1 = ["onClick"];
const _sfc_main$4 = defineComponent({
  __name: "Paginator",
  props: {
    dataset: {},
    page: {}
  },
  emits: ["update:page"],
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const rowsPerPage = ref(5);
    const rowsPerPageOptions = [
      {
        name: "5",
        value: 5
      },
      {
        name: "10",
        value: 10
      },
      {
        name: "15",
        value: 15
      }
    ];
    const showPaginator = computed(() => {
      if (pages.value.length > 1) {
        return true;
      }
      if (props.dataset === void 0) {
        return false;
      }
      return props.dataset.length > 5;
    });
    const pages = computed(() => {
      if (props.dataset === void 0 || props.dataset.length === 0) {
        return [];
      }
      const result = [];
      for (let i = 0; i < props.dataset.length; i += rowsPerPage.value) {
        const chunk = props.dataset.slice(i, i + rowsPerPage.value);
        result.push(chunk);
      }
      currentPage.value = result[0];
      _currentPageIndex.value = 0;
      return result;
    });
    const _currentPage = ref([]);
    const currentPage = computed({
      get() {
        return _currentPage.value;
      },
      set(newValue) {
        _currentPage.value = newValue;
        emit("update:page", newValue);
      }
    });
    const _currentPageIndex = ref(0);
    const currentPageIndex = computed({
      get() {
        return _currentPageIndex.value;
      },
      set(newIndex) {
        _currentPageIndex.value = newIndex;
        if (pages.value) {
          currentPage.value = pages.value[newIndex];
        }
      }
    });
    const paginatorText = computed(() => {
      var _a, _b;
      const cIdx = currentPageIndex.value;
      const rpp = rowsPerPage.value;
      const tot = (_b = (_a = props.dataset) == null ? void 0 : _a.length) != null ? _b : 0;
      const firstIndex = cIdx * rpp + 1;
      const lastIndex = Math.min(cIdx * rpp + rpp, tot);
      return t("showing-page-of-n", [firstIndex, lastIndex, tot]);
    });
    const arrayRange = (start, stop, step) => Array.from({ length: (stop - start) / step + 1 }, (value, index) => start + index * step);
    const visiblePageButtons = computed(() => {
      if (pages.value.length < 3) {
        return arrayRange(0, pages.value.length - 1, 1);
      }
      if (currentPageIndex.value === 0) {
        return arrayRange(0, 2, 1);
      }
      const totalPages = pages.value.length;
      if (currentPageIndex.value === totalPages - 1) {
        return arrayRange(totalPages - 3, totalPages - 1, 1);
      }
      return arrayRange(currentPageIndex.value - 1, currentPageIndex.value + 1, 1);
    });
    function goToPage(index) {
      currentPageIndex.value = index;
    }
    function firstPage() {
      currentPageIndex.value = 0;
    }
    function prevPage() {
      if (currentPageIndex.value !== 0) {
        currentPageIndex.value -= 1;
      }
    }
    function nextPage() {
      if (currentPageIndex.value !== pages.value.length - 1) {
        currentPageIndex.value += 1;
      }
    }
    function lastPage() {
      if (currentPageIndex.value !== pages.value.length - 1) {
        currentPageIndex.value = pages.value.length - 1;
      }
    }
    return (_ctx, _cache) => {
      return showPaginator.value ? (openBlock(), createElementBlock("div", _hoisted_1$4, [
        createBaseVNode("div", _hoisted_2$4, [
          createBaseVNode("span", _hoisted_3$3, toDisplayString(unref(t)("rows-per-page")), 1),
          createVNode(Dropdown, {
            modelValue: rowsPerPage.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => rowsPerPage.value = $event),
            items: rowsPerPageOptions
          }, null, 8, ["modelValue"])
        ]),
        createBaseVNode("div", _hoisted_4$3, toDisplayString(paginatorText.value), 1),
        createBaseVNode("div", _hoisted_5$2, [
          createBaseVNode("div", {
            class: normalizeClass(["paginator-button", { disabled: currentPageIndex.value === 0 }]),
            part: "paginator-button",
            onClick: withModifiers(firstPage, ["prevent"])
          }, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).doubleChevronLeft,
              alt: "First page"
            }, null, 8, ["src"])
          ], 10, _hoisted_6$2),
          createBaseVNode("div", {
            class: normalizeClass(["paginator-button", { disabled: currentPageIndex.value === 0 }]),
            part: "paginator-button",
            onClick: withModifiers(prevPage, ["prevent"])
          }, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).chevronLeft,
              alt: "Previous page"
            }, null, 8, ["src"])
          ], 10, _hoisted_7$2),
          (openBlock(true), createElementBlock(Fragment, null, renderList(visiblePageButtons.value, (value) => {
            return openBlock(), createElementBlock("div", {
              key: value,
              class: normalizeClass(["paginator-button", { selected: value === currentPageIndex.value }]),
              part: "paginator-button",
              onClick: withModifiers(($event) => goToPage(value), ["prevent"])
            }, toDisplayString(value + 1), 11, _hoisted_8$2);
          }), 128)),
          createBaseVNode("div", {
            class: normalizeClass(["paginator-button", { disabled: currentPageIndex.value === pages.value.length - 1 }]),
            part: "paginator-button",
            onClick: withModifiers(nextPage, ["prevent"])
          }, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).chevronRight,
              alt: "Next page"
            }, null, 8, ["src"])
          ], 10, _hoisted_9$1),
          createBaseVNode("div", {
            class: normalizeClass(["paginator-button", { disabled: currentPageIndex.value === pages.value.length - 1 }]),
            part: "paginator-button",
            onClick: withModifiers(lastPage, ["prevent"])
          }, [
            createVNode(unref(InlineSvg), {
              src: unref(Icons).doubleChevronRight,
              alt: "Last page"
            }, null, 8, ["src"])
          ], 10, _hoisted_10$1)
        ])
      ])) : createCommentVNode("", true);
    };
  }
});
var ActionType = /* @__PURE__ */ ((ActionType2) => {
  ActionType2["default"] = "DEFAULT";
  ActionType2["danger"] = "DANGER";
  return ActionType2;
})(ActionType || {});
const _hoisted_1$3 = { class: "action-menu" };
const _hoisted_2$3 = ["onMousedown", "data-test"];
const _sfc_main$3 = defineComponent({
  __name: "DropdownActionMenu",
  props: {
    actions: {}
  },
  setup(__props) {
    const dropdownVisible = ref(false);
    function toggleDropdown(visible) {
      if (visible === void 0) {
        dropdownVisible.value = !dropdownVisible.value;
      } else {
        dropdownVisible.value = visible;
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$3, [
        createBaseVNode("div", {
          class: "menu-icon",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => toggleDropdown(), ["prevent"])),
          onFocusout: _cache[1] || (_cache[1] = withModifiers(($event) => toggleDropdown(false), ["prevent"])),
          tabindex: "0",
          "data-test": "action-menu-button"
        }, [
          createVNode(unref(InlineSvg), {
            src: unref(Icons).ellipsis,
            alt: "Action menu"
          }, null, 8, ["src"])
        ], 32),
        createBaseVNode("div", {
          class: normalizeClass(["menu-dropdown", { collapsed: !dropdownVisible.value }])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.actions, (action) => {
            return openBlock(), createElementBlock("div", {
              class: normalizeClass(["menu-item", { danger: action.type === unref(ActionType).danger }]),
              key: action.displayName,
              onMousedown: ($event) => action.action(),
              "data-test": action.testID
            }, toDisplayString(action.displayName), 43, _hoisted_2$3);
          }), 128))
        ], 2)
      ]);
    };
  }
});
const _hoisted_1$2 = { class: "device-actions" };
const _hoisted_2$2 = { key: 0 };
const _hoisted_3$2 = ["data-test"];
const _hoisted_4$2 = ["onClick", "data-test"];
const _sfc_main$2 = defineComponent({
  __name: "IconActionMenu",
  props: {
    actions: {},
    index: {}
  },
  setup(__props) {
    const confirmationButtonRef = ref();
    const confirmationButtonTestID = ref("");
    const showConfirmationButton = ref(false);
    const confirmationButtonText = ref("");
    const confirmationAction = ref(() => __async(this, null, function* () {
      return false;
    }));
    function cancel() {
      showConfirmationButton.value = false;
    }
    function handleIconMenuAction(action) {
      return __async(this, null, function* () {
        if (action.requiresConfirmation) {
          showConfirmationButton.value = true;
          confirmationButtonText.value = action.confirmationText;
          confirmationButtonTestID.value = action.testID;
          confirmationAction.value = action.action;
        } else {
          yield action.action();
          return true;
        }
        return false;
      });
    }
    watch(showConfirmationButton, (newValue) => {
      if (newValue) {
        setTimeout(() => {
          var _a;
          (_a = confirmationButtonRef == null ? void 0 : confirmationButtonRef.value) == null ? void 0 : _a.focus();
        });
      }
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$2, [
        showConfirmationButton.value ? (openBlock(), createElementBlock("div", _hoisted_2$2, [
          createBaseVNode("button", {
            ref_key: "confirmationButtonRef",
            ref: confirmationButtonRef,
            class: "button is-primary",
            part: "button",
            "data-test": `${confirmationButtonTestID.value}-confirmation`,
            onClick: _cache[0] || (_cache[0] = withModifiers(
              (...args) => confirmationAction.value && confirmationAction.value(...args),
              ["prevent"]
            )),
            onBlur: cancel
          }, toDisplayString(confirmationButtonText.value), 41, _hoisted_3$2)
        ])) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.actions, (action) => {
          var _a;
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(["menu-item", { danger: action.type === unref(ActionType).danger }]),
            key: action.displayName,
            onClick: ($event) => handleIconMenuAction(action),
            "data-test": `${action.testID}-${_ctx.index}`
          }, [
            createBaseVNode("div", {
              class: normalizeClass(["device-actions-icon-wrapper", action.testID]),
              tabindex: "0"
            }, [
              createVNode(unref(InlineSvg), {
                class: "device-actions-icon",
                src: (_a = action.icon) != null ? _a : "",
                alt: action.testID
              }, null, 8, ["src", "alt"])
            ], 2)
          ], 10, _hoisted_4$2);
        }), 128))
      ]);
    };
  }
});
const _hoisted_1$1 = {
  class: "passage-table",
  part: "passage-table"
};
const _hoisted_2$1 = {
  key: 0,
  class: "passage-table-header-row",
  part: "passage-table-header-row"
};
const _hoisted_3$1 = /* @__PURE__ */ createBaseVNode("th", {
  class: "passage-table-header-cell passage-action-menu-cell",
  part: "passage-table-header-cell"
}, null, -1);
const _hoisted_4$1 = ["data-test"];
const _hoisted_5$1 = ["data-test"];
const _hoisted_6$1 = {
  key: 2,
  class: "passage-table-empty"
};
const _hoisted_7$1 = ["colspan"];
const _hoisted_8$1 = {
  class: "title secondary-title",
  "data-test": "empty-table"
};
const mobileBreakpoint = 500;
const _sfc_main$1 = defineComponent({
  __name: "SimpleDataTable",
  props: {
    dataset: {},
    headers: {},
    columns: {},
    isIconActionMenu: { type: Boolean },
    actions: {}
  },
  setup(__props) {
    const props = __props;
    const page = ref();
    const { t } = useLocale();
    const tableContainer = ref();
    const resizeObserver = new ResizeObserver(() => {
      checkMobile();
    });
    const isMobile = ref(false);
    const minHeight = ref(0);
    function checkMobile() {
      if (tableContainer.value === void 0) {
        return;
      }
      const tableWidth = tableContainer.value.getBoundingClientRect().width;
      isMobile.value = tableWidth < mobileBreakpoint;
    }
    function calculateMinHeight() {
      if (props.dataset === void 0) {
        minHeight.value = 0;
        return;
      }
      if (tableContainer.value === null || tableContainer.value === void 0) {
        minHeight.value = 0;
        return;
      }
      if (props.dataset.length > 5) {
        const containerHeight = tableContainer.value.getBoundingClientRect().height;
        minHeight.value = Math.ceil(containerHeight);
      }
    }
    function getActionsForItem(item) {
      var _a;
      if (props.actions === void 0) {
        return [];
      }
      return (_a = props.actions) == null ? void 0 : _a.map((tableAction) => {
        var _a2, _b, _c, _d;
        return {
          displayName: tableAction.displayName,
          testID: tableAction.testID,
          type: tableAction.type,
          action: () => {
            tableAction.action(item);
          },
          icon: (_a2 = tableAction.icon) != null ? _a2 : void 0,
          alt: (_b = tableAction.alt) != null ? _b : void 0,
          requiresConfirmation: (_c = tableAction.requiresConfirmation) != null ? _c : false,
          confirmationText: (_d = tableAction.confirmationText) != null ? _d : ""
        };
      });
    }
    function formatDateTime(dateTime) {
      return dayjs(dateTime).format("MMMM D, YYYY");
    }
    watch(() => props.dataset, () => {
      calculateMinHeight();
      checkMobile();
      if (tableContainer.value) {
        resizeObserver.observe(tableContainer.value);
      }
    });
    onMounted(() => {
      calculateMinHeight();
      checkMobile();
      if (tableContainer.value) {
        resizeObserver.observe(tableContainer.value);
      }
    });
    onUnmounted(() => {
      resizeObserver.disconnect();
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        style: normalizeStyle(`min-height: ${minHeight.value}px`),
        ref_key: "tableContainer",
        ref: tableContainer
      }, [
        createBaseVNode("table", _hoisted_1$1, [
          createBaseVNode("tbody", null, [
            _ctx.headers ? (openBlock(), createElementBlock("tr", _hoisted_2$1, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(isMobile.value ? [_ctx.headers[0]] : _ctx.headers, (header) => {
                return openBlock(), createElementBlock("th", {
                  key: header,
                  class: "passage-table-header-cell",
                  part: "passage-table-header-cell"
                }, toDisplayString(header), 1);
              }), 128)),
              _hoisted_3$1
            ])) : createCommentVNode("", true),
            page.value ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(page.value, (item, index) => {
              return openBlock(), createElementBlock("tr", {
                key: index,
                class: "passage-table-row",
                part: "passage-table-row",
                "data-test": `passkey-table-row-${index}`
              }, [
                (openBlock(true), createElementBlock(Fragment, null, renderList(isMobile.value ? [_ctx.columns[0]] : _ctx.columns, (column, columnIndex) => {
                  return openBlock(), createElementBlock("td", {
                    key: column,
                    class: normalizeClass(["passage-table-cell", {
                      isMobile: isMobile.value
                    }]),
                    part: "passage-table-cell",
                    "data-test": `passkey-table-cell-${columnIndex}`
                  }, [
                    renderSlot(_ctx.$slots, column, {
                      value: item[column],
                      item,
                      index,
                      isMobile: isMobile.value,
                      formatDateTime
                    }, () => [
                      createTextVNode(toDisplayString(item[column]), 1)
                    ])
                  ], 10, _hoisted_5$1);
                }), 128)),
                _ctx.actions && _ctx.actions.length > 0 ? (openBlock(), createElementBlock("td", {
                  key: 0,
                  class: normalizeClass(["passage-table-cell passage-action-menu-cell", {
                    isIconMenu: _ctx.isIconActionMenu,
                    isMobile: isMobile.value
                  }]),
                  part: "passage-table-cell"
                }, [
                  _ctx.isIconActionMenu ? (openBlock(), createBlock(_sfc_main$2, {
                    key: 0,
                    actions: getActionsForItem(item),
                    index
                  }, null, 8, ["actions", "index"])) : (openBlock(), createBlock(_sfc_main$3, {
                    key: 1,
                    actions: getActionsForItem(item)
                  }, null, 8, ["actions"]))
                ], 2)) : createCommentVNode("", true)
              ], 8, _hoisted_4$1);
            }), 128)) : (openBlock(), createElementBlock("tr", _hoisted_6$1, [
              createBaseVNode("td", {
                class: "passage-table-empty-cell",
                colspan: isMobile.value ? 3 : _ctx.columns.length + 1
              }, [
                createBaseVNode("div", _hoisted_8$1, toDisplayString(unref(t)("no-devices-found")), 1),
                createBaseVNode("div", null, toDisplayString(unref(t)("there-are-no-devices-registered")), 1)
              ], 8, _hoisted_7$1)
            ]))
          ])
        ]),
        createVNode(_sfc_main$4, {
          dataset: _ctx.dataset,
          page: page.value,
          "onUpdate:page": _cache[0] || (_cache[0] = ($event) => page.value = $event)
        }, null, 8, ["dataset", "page"])
      ], 4);
    };
  }
});
const _hoisted_1 = { class: "table-container" };
const _hoisted_2 = {
  class: "flex-row flex-end",
  style: { "margin-bottom": "30px" }
};
const _hoisted_3 = { class: "title secondary-title" };
const _hoisted_4 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_5 = {
  class: "flex-row",
  style: { "align-items": "center" }
};
const _hoisted_6 = { class: "profile-table-info" };
const _hoisted_7 = {
  key: 0,
  class: "text is-danger"
};
const _hoisted_8 = { class: "profile-table-metadata" };
const _hoisted_9 = ["data-test"];
const _hoisted_10 = ["data-test"];
const _hoisted_11 = {
  key: 0,
  class: "current-device"
};
const _sfc_main = defineComponent({
  __name: "DevicesTable",
  props: {
    userInfo: {},
    refreshDevices: { type: Function },
    webauthnAllowed: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const { passage } = usePassage();
    const { revokeDevice, errorMessage } = useRevokeDevice();
    const passkeyFeatures = ref();
    const showAddModal = ref(false);
    const isEditing = ref(false);
    passage.createCredentialAvailable().then((features) => {
      passkeyFeatures.value = features;
    });
    const orderedDeviceList = computed(() => {
      if (props.userInfo === void 0) {
        return [];
      }
      const arrayCopy = props.userInfo.webauthn_devices.map((device) => device);
      return arrayCopy.sort((a, b) => {
        return new Date(a.last_login_at) > new Date(b.last_login_at) ? -1 : 1;
      });
    });
    const selectedDevice = ref();
    function editPasskey(item) {
      selectedDevice.value = item;
      isEditing.value = true;
    }
    function revokePasskey(item) {
      return __async(this, null, function* () {
        selectedDevice.value = item;
        if (errorMessage.value) {
          return true;
        }
        const result = yield revokeDevice(item);
        if (result) {
          actionFinished();
        }
        return result;
      });
    }
    const tableActions = computed(() => [
      {
        displayName: t("edit-device"),
        type: ActionType.default,
        action: editPasskey,
        icon: Icons.pencil,
        alt: "Edit passkey name",
        testID: "edit-passkey-button",
        requiresConfirmation: false
      },
      {
        displayName: t("revoke-device"),
        type: ActionType.danger,
        action: revokePasskey,
        icon: Icons.close,
        alt: "Delete passkey",
        testID: "revoke-passkey-button",
        requiresConfirmation: true,
        confirmationText: t("delete")
      }
    ]);
    const currentDevice = computed(() => {
      var _a, _b;
      if (props.userInfo === void 0) {
        return void 0;
      }
      const psgCredObj = localStorage.getItem("psg_cred_obj");
      if (!psgCredObj) {
        return void 0;
      }
      const psgCredID = JSON.parse(psgCredObj)[(_b = (_a = props.userInfo) == null ? void 0 : _a.id) != null ? _b : ""];
      return props.userInfo.webauthn_devices.find((device) => device.cred_id === psgCredID);
    });
    const refreshing = ref(false);
    function actionFinished() {
      return __async(this, null, function* () {
        selectedDevice.value = void 0;
        refreshing.value = true;
        yield props.refreshDevices();
        refreshing.value = false;
      });
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1, [
        refreshing.value ? (openBlock(), createBlock(_sfc_main$5, {
          key: 0,
          active: refreshing.value
        }, null, 8, ["active"])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_2, [
          createBaseVNode("div", _hoisted_3, toDisplayString(unref(t)("my-passkeys")), 1),
          _hoisted_4,
          _ctx.userInfo && _ctx.webauthnAllowed ? (openBlock(), createElementBlock("button", {
            key: 0,
            part: "button button-secondary",
            class: "button is-secondary is-modal",
            onClick: _cache[0] || (_cache[0] = withModifiers(($event) => showAddModal.value = true, ["prevent"])),
            "data-test": "add-passkey-button"
          }, toDisplayString(unref(t)("add-device")), 1)) : createCommentVNode("", true)
        ]),
        (openBlock(), createBlock(_sfc_main$1, {
          class: "passage-profile-table",
          dataset: orderedDeviceList.value,
          columns: ["friendly_name"],
          actions: tableActions.value,
          isIconActionMenu: true,
          key: orderedDeviceList.value.length
        }, {
          friendly_name: withCtx(({ item, index, isMobile, formatDateTime }) => {
            var _a, _b;
            return [
              createBaseVNode("div", _hoisted_5, [
                !isMobile ? (openBlock(), createBlock(_sfc_main$7, {
                  key: 0,
                  device: item
                }, null, 8, ["device"])) : createCommentVNode("", true),
                createBaseVNode("div", {
                  class: normalizeClass(["profile-table-content", { isMobile }])
                }, [
                  createBaseVNode("div", _hoisted_6, [
                    createVNode(_sfc_main$6, {
                      device: item,
                      selectedDeviceId: (_a = selectedDevice.value) == null ? void 0 : _a.id,
                      isEditing: isEditing.value,
                      onFinishEditing: _cache[1] || (_cache[1] = ($event) => isEditing.value = false),
                      index
                    }, null, 8, ["device", "selectedDeviceId", "isEditing", "index"]),
                    unref(errorMessage) ? (openBlock(), createElementBlock("div", _hoisted_7, toDisplayString(unref(errorMessage)), 1)) : createCommentVNode("", true),
                    createBaseVNode("div", _hoisted_8, [
                      createBaseVNode("span", {
                        "data-test": `passkey-table-row-${index}-device-date-added`
                      }, toDisplayString(`${unref(t)("added-time")}: ${formatDateTime(item.created_at)}`), 9, _hoisted_9),
                      createBaseVNode("span", {
                        "data-test": `passkey-table-row-${index}-device-last-login`
                      }, toDisplayString(`${unref(t)("last-login")}: ${formatDateTime(item.last_login_at)}`), 9, _hoisted_10)
                    ])
                  ]),
                  ((_b = currentDevice.value) == null ? void 0 : _b.id) === item.id ? (openBlock(), createElementBlock("div", _hoisted_11, toDisplayString(unref(t)("current")), 1)) : createCommentVNode("", true)
                ], 2)
              ])
            ];
          }),
          _: 1
        }, 8, ["dataset", "actions"])),
        createVNode(_sfc_main$8, {
          active: showAddModal.value,
          "onUpdate:active": _cache[2] || (_cache[2] = ($event) => showAddModal.value = $event),
          onDialogClose: actionFinished,
          "passkey-features": passkeyFeatures.value
        }, null, 8, ["active", "passkey-features"])
      ]);
    };
  }
});
function useCurrentUser(appInfo) {
  const loading = ref(true);
  const error = ref(void 0);
  const userInfo = ref(void 0);
  const { passage } = usePassage();
  const passageUser = passage.getCurrentUser();
  function execute() {
    return __async(this, null, function* () {
      try {
        loading.value = true;
        if (passageUser) {
          userInfo.value = yield passageUser.userInfo();
          if (userInfo.value !== void 0 && userInfo.value.user_metadata === null) {
            userInfo.value.user_metadata = {};
          }
          transformMetadata();
        }
      } catch (err) {
        error.value = err;
      } finally {
        loading.value = false;
      }
    });
  }
  onMounted(() => {
    execute();
  });
  function refreshDevices() {
    return __async(this, null, function* () {
      if (!userInfo.value) {
        return;
      }
      try {
        userInfo.value.webauthn_devices = yield passageUser.listDevices();
      } catch (err) {
        error.value = err;
      } finally {
        loading.value = false;
      }
    });
  }
  function refreshMetadata() {
    return __async(this, null, function* () {
      var _a;
      if (!userInfo.value) {
        return;
      }
      try {
        userInfo.value.user_metadata = (_a = yield passageUser.getMetadata()) != null ? _a : {};
        transformMetadata();
      } catch (err) {
        error.value = err;
      } finally {
        loading.value = false;
      }
    });
  }
  function transformMetadata() {
    if (appInfo === void 0) {
      return;
    }
    appInfo.user_metadata_schema.forEach((schema) => {
      if (!userInfo.value || !userInfo.value.user_metadata) {
        return;
      }
      const metadataValue = userInfo.value.user_metadata[schema.field_name];
      if (schema.type === he.DATE && metadataValue) {
        userInfo.value.user_metadata[schema.field_name] = dayjs(metadataValue).format("MM/DD/YYYY");
      }
    });
  }
  return {
    userInfo,
    loading,
    error,
    refreshDevices,
    refreshMetadata
  };
}
function useSetupWebauthn(appInfo, passage) {
  const webauthnAllowed = ref(false);
  const passkeysEnabled = ref(false);
  const initialized = ref(false);
  watch(appInfo, () => __async(this, null, function* () {
    initialized.value = false;
    if (appInfo.value === void 0 || passage.value === void 0) {
      return;
    }
    passkeysEnabled.value = appInfo.value.auth_methods.passkeys !== void 0;
    if (passkeysEnabled.value) {
      const authOriginValid = passage.value.checkWebauthnConfig(appInfo.value);
      if (authOriginValid) {
        webauthnAllowed.value = (yield passage.value.createCredentialAvailable()).securityKey;
      }
    }
    initialized.value = true;
  }));
  return {
    webauthnAllowed,
    passkeysEnabled,
    initialized
  };
}
function useProfileElementSetup(props) {
  function storeProps() {
    const { updateDefaultCountryCode } = useDefaultCountryCode();
    updateDefaultCountryCode(props.defaultCountryCode);
    if (props.appId) {
      createPassageInstance(props.appId, props.tokenStore);
    }
  }
  storeProps();
  onBeforeUpdate(() => {
    storeProps();
  });
  const { languageLoading } = useStoreLocale(props);
  const { currentTheme } = useThemeSetup(props);
  const containerRef = ref();
  useIntlTelInput(containerRef);
  return {
    languageLoading,
    containerRef,
    currentTheme
  };
}
export { _sfc_main$5 as _, _sfc_main$1 as a, _sfc_main as b, useSetupWebauthn as c, useProfileElementSetup as d, useCurrentUser as u };
//# 
