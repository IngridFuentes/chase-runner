import { d as defineComponent, u as unref, b as createBlock, z as createCommentVNode, o as openBlock, $ as useAppInfo, c as createElementBlock, L as Fragment, w as withDirectives, v as vShow, n as normalizeClass, s as safelyRegisterElement } from "../customElements.es.js";
import { u as useCurrentUser, b as _sfc_main$3, c as useSetupWebauthn, _ as _sfc_main$4, d as useProfileElementSetup } from "../customElements.es4.js";
const _sfc_main$2 = defineComponent({
  __name: "PasskeyTableView",
  props: {
    appInfo: {},
    webauthnAllowed: { type: Boolean },
    passkeysEnabled: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const { userInfo, loading, refreshDevices } = useCurrentUser(props.appInfo);
    return (_ctx, _cache) => {
      return !unref(loading) && _ctx.passkeysEnabled ? (openBlock(), createBlock(_sfc_main$3, {
        key: 0,
        userInfo: unref(userInfo),
        refreshDevices: unref(refreshDevices),
        webauthnAllowed: _ctx.webauthnAllowed
      }, null, 8, ["userInfo", "refreshDevices", "webauthnAllowed"])) : createCommentVNode("", true);
    };
  }
});
const _hoisted_1 = {
  key: 1,
  class: "notification is-danger has-text-centered"
};
const _sfc_main$1 = defineComponent({
  __name: "MainView",
  setup(__props) {
    const { appInfo, loading: appInfoLoading, invalidAppId, passage } = useAppInfo();
    const { webauthnAllowed, passkeysEnabled, initialized } = useSetupWebauthn(appInfo, passage);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        unref(appInfoLoading) || !unref(initialized) ? (openBlock(), createBlock(_sfc_main$4, {
          key: 0,
          active: unref(appInfoLoading) || !unref(initialized)
        }, null, 8, ["active"])) : unref(invalidAppId) ? (openBlock(), createElementBlock("div", _hoisted_1, " Passage-Profile Error: Invalid App ID. ")) : createCommentVNode("", true),
        unref(appInfo) && unref(initialized) ? (openBlock(), createBlock(_sfc_main$2, {
          key: 2,
          appInfo: unref(appInfo),
          webauthnAllowed: unref(webauthnAllowed),
          passkeysEnabled: unref(passkeysEnabled)
        }, null, 8, ["appInfo", "webauthnAllowed", "passkeysEnabled"])) : createCommentVNode("", true)
      ], 64);
    };
  }
});
const _sfc_main = defineComponent({
  __name: "PasskeyTable.ce",
  props: {
    appId: {},
    lang: {},
    defaultCountryCode: {},
    tokenStore: {},
    theme: {}
  },
  setup(__props) {
    const props = __props;
    const { languageLoading, containerRef, currentTheme } = useProfileElementSetup(props);
    return (_ctx, _cache) => {
      return withDirectives((openBlock(), createElementBlock("div", {
        id: "passage-profile-container",
        class: normalizeClass(["passage-profile", unref(currentTheme)]),
        ref_key: "containerRef",
        ref: containerRef
      }, [
        (openBlock(), createBlock(_sfc_main$1, { key: _ctx.appId }))
      ], 2)), [
        [vShow, !unref(languageLoading)]
      ]);
    };
  }
});
function registerPassageLoginElement() {
  safelyRegisterElement(_sfc_main, "passkey-table");
}
registerPassageLoginElement();
export { registerPassageLoginElement };
//# 
