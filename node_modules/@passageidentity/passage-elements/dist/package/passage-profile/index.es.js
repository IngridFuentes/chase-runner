var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a, prop, b2[prop]);
    }
  return a;
};
var __spreadProps = (a, b2) => __defProps(a, __getOwnPropDescs(b2));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
import { d as defineComponent, h as useLocale, f as ref, _ as _export_sfc, ab as resolveComponent, o as openBlock, c as createElementBlock, a as createBaseVNode, t as toDisplayString, q as withModifiers, z as createCommentVNode, n as normalizeClass, b as createBlock, L as Fragment, j as computed, k as onMounted, m as onBeforeUnmount, r as renderSlot, ad as withKeys, g as watch, E as createVNode, e as withCtx, w as withDirectives, x as vModelText, N as useDefaultCountryCode, l as ue, ae as le, H as useTheme, u as unref, G as InlineSvg, T as Theme, J as b, $ as useAppInfo, v as vShow, s as safelyRegisterElement } from "../customElements.es.js";
import { _ as _sfc_main$9, a as _sfc_main$a, u as useCurrentUser, b as _sfc_main$b, c as useSetupWebauthn, d as useProfileElementSetup } from "../customElements.es4.js";
import { U as UserMetadata, u as useUpdateUser, L as LayoutType, i as intlTelInput, a as isEmail, s as socialConnectionMetadata } from "../customElements.es3.js";
const _sfc_main$8 = defineComponent({
  name: "Metadata Section",
  components: {
    UserMetadata
  },
  props: {
    appInfo: {
      type: Object,
      required: true
    },
    userInfo: {
      type: Object,
      required: false
    },
    refreshMetadata: {
      type: Function,
      required: true
    }
  },
  setup(props) {
    const { t } = useLocale();
    const isEditing = ref(false);
    const { updateMetadata, updateMetadataError } = useUpdateUser();
    function save() {
      return __async(this, null, function* () {
        var _a;
        let success = true;
        if (componentRef.value) {
          const isValid = componentRef.value.validate();
          if (!isValid) {
            return;
          }
          if ((_a = props.userInfo) == null ? void 0 : _a.user_metadata) {
            success = yield updateMetadata(props.userInfo.user_metadata, props.appInfo.user_metadata_schema);
          }
        }
        isEditing.value = !success;
      });
    }
    function cancel() {
      return __async(this, null, function* () {
        yield props.refreshMetadata();
        if (componentRef.value) {
          componentRef.value.validate();
        }
        isEditing.value = false;
      });
    }
    const componentRef = ref();
    return {
      LayoutType,
      isEditing,
      save,
      cancel,
      componentRef,
      updateMetadataError,
      t
    };
  }
});
const _hoisted_1$7 = { class: "metadata-header" };
const _hoisted_2$5 = { class: "title secondary-title" };
const _hoisted_3$3 = {
  key: 0,
  class: "edit-save-container"
};
const _hoisted_4$3 = { key: 0 };
const _hoisted_5$2 = {
  key: 1,
  style: { "text-align": "center" }
};
const _hoisted_6$1 = { class: "title secondary-title" };
function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
  var _a;
  const _component_user_metadata = resolveComponent("user-metadata");
  return openBlock(), createElementBlock(Fragment, null, [
    createBaseVNode("div", _hoisted_1$7, [
      createBaseVNode("div", _hoisted_2$5, toDisplayString(_ctx.t("personal-info")), 1),
      _ctx.userInfo && _ctx.appInfo.profile_management ? (openBlock(), createElementBlock("div", _hoisted_3$3, [
        !_ctx.isEditing ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "edit-save-text",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.isEditing = true, ["prevent"]))
        }, toDisplayString(_ctx.t("edit")), 1)) : createCommentVNode("", true),
        _ctx.isEditing ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: "edit-save-text",
          onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.save && _ctx.save(...args), ["prevent"]))
        }, toDisplayString(_ctx.t("save")), 1)) : createCommentVNode("", true),
        _ctx.isEditing ? (openBlock(), createElementBlock("div", {
          key: 2,
          class: "edit-save-text",
          onClick: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.cancel && _ctx.cancel(...args), ["prevent"]))
        }, toDisplayString(_ctx.t("cancel")), 1)) : createCommentVNode("", true)
      ])) : createCommentVNode("", true)
    ]),
    createBaseVNode("div", {
      class: normalizeClass(["feedback", _ctx.updateMetadataError ? "feedback-danger" : ""])
    }, [
      _ctx.updateMetadataError ? (openBlock(), createElementBlock("div", _hoisted_4$3, toDisplayString(_ctx.updateMetadataError), 1)) : createCommentVNode("", true)
    ], 2),
    _ctx.userInfo ? (openBlock(), createBlock(_component_user_metadata, {
      key: 0,
      appInfo: _ctx.appInfo,
      layoutType: _ctx.LayoutType.Profile,
      userMetadata: (_a = _ctx.userInfo.user_metadata) != null ? _a : {},
      ref: "componentRef",
      isEditing: _ctx.isEditing
    }, null, 8, ["appInfo", "layoutType", "userMetadata", "isEditing"])) : (openBlock(), createElementBlock("div", _hoisted_5$2, [
      createBaseVNode("div", _hoisted_6$1, toDisplayString(_ctx.t("no-user-found")), 1),
      createBaseVNode("div", null, toDisplayString(_ctx.t("there-is-no-currently-logged-in-user")), 1)
    ]))
  ], 64);
}
var MetadataSection = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$4]]);
const _sfc_main$7 = defineComponent({
  name: "Editable Control",
  props: {
    title: {
      type: String,
      required: true
    },
    editable: {
      type: Boolean,
      default: true
    },
    onSave: {
      type: Function,
      required: false
    },
    onCancel: {
      type: Function,
      required: false
    },
    isEditing: {
      type: Boolean,
      default: void 0
    },
    errorMessage: {
      type: String,
      required: false
    }
  },
  emits: ["update:isEditing", "editStart"],
  setup(props, context) {
    const { t } = useLocale();
    const isEditingLocal = ref(false);
    const isEditingValue = computed({
      get() {
        if (props.isEditing === void 0) {
          return isEditingLocal.value;
        }
        return props.isEditing;
      },
      set(newValue) {
        if (props.isEditing === void 0) {
          isEditingLocal.value = newValue;
          return;
        }
        context.emit("update:isEditing", newValue);
        if (newValue) {
          context.emit("editStart");
        }
      }
    });
    function save() {
      if (props.onSave === void 0) {
        isEditingValue.value = false;
        return;
      }
      props.onSave().then((validated) => {
        if (validated) {
          isEditingValue.value = false;
        }
      });
    }
    function cancel() {
      if (props.onCancel === void 0) {
        isEditingValue.value = false;
        return;
      }
      props.onCancel().then(() => {
        isEditingValue.value = false;
      });
    }
    const container = ref();
    const isCompact = ref(false);
    function checkSize() {
      if (container.value === void 0) {
        return;
      }
      const width = container.value.getBoundingClientRect().width;
      isCompact.value = width < 415;
    }
    const resizeObserver = new ResizeObserver(() => {
      checkSize();
    });
    onMounted(() => {
      if (container.value) {
        resizeObserver.observe(container.value);
      }
    });
    onBeforeUnmount(() => {
      resizeObserver.disconnect();
    });
    return {
      isEditingValue,
      save,
      cancel,
      container,
      isCompact,
      t
    };
  }
});
const _hoisted_1$6 = { class: "user-info-label" };
const _hoisted_2$4 = { class: "login-info-control" };
const _hoisted_3$2 = {
  key: 0,
  class: "edit-save-container"
};
const _hoisted_4$2 = { class: "message is-danger" };
const _hoisted_5$1 = { key: 0 };
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("form", {
    onSubmit: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.save && _ctx.save(...args), ["prevent"])),
    onKeyup: _cache[4] || (_cache[4] = withKeys((...args) => _ctx.cancel && _ctx.cancel(...args), ["esc"]))
  }, [
    createBaseVNode("div", {
      class: normalizeClass(["login-info-row", { isCompact: _ctx.isCompact }]),
      ref: "container"
    }, [
      createBaseVNode("div", _hoisted_1$6, toDisplayString(_ctx.title), 1),
      createBaseVNode("div", _hoisted_2$4, [
        renderSlot(_ctx.$slots, "default")
      ]),
      _ctx.editable ? (openBlock(), createElementBlock("div", _hoisted_3$2, [
        !_ctx.isEditing ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "edit-save-text",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => _ctx.isEditingValue = true, ["prevent"])),
          "data-test": "edit-button"
        }, toDisplayString(_ctx.t("edit")), 1)) : createCommentVNode("", true),
        _ctx.isEditing ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: "edit-save-text",
          onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.save && _ctx.save(...args), ["prevent"])),
          "data-test": "save-button"
        }, toDisplayString(_ctx.t("save")), 1)) : createCommentVNode("", true),
        _ctx.isEditing ? (openBlock(), createElementBlock("div", {
          key: 2,
          class: "edit-save-text",
          onClick: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.cancel && _ctx.cancel(...args), ["prevent"])),
          "data-test": "cancel-button"
        }, toDisplayString(_ctx.t("cancel")), 1)) : createCommentVNode("", true)
      ])) : createCommentVNode("", true),
      createBaseVNode("div", _hoisted_4$2, [
        _ctx.errorMessage ? (openBlock(), createElementBlock("div", _hoisted_5$1, toDisplayString(_ctx.errorMessage), 1)) : createCommentVNode("", true)
      ])
    ], 2)
  ], 32);
}
var EditableControl = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$3]]);
const _sfc_main$6 = defineComponent({
  name: "Phone Number",
  components: {
    EditableControl
  },
  props: {
    userInfo: {
      type: Object,
      required: false
    },
    required: {
      type: Boolean,
      required: true
    },
    editable: {
      type: Boolean,
      required: true
    }
  },
  emits: ["globalMessage"],
  setup(props, context) {
    var _a;
    const { t } = useLocale();
    const isEditing = ref(false);
    const { changePhoneRequest, updateInfoMessage, updatePhoneError, updatePending, identifierExists } = useUpdateUser();
    const title = computed(() => {
      const translated = t("phone-number");
      return translated.charAt(0).toUpperCase() + translated.slice(1);
    });
    function initialValue(value) {
      if (!value) {
        return DefaultValue.NONE;
      }
      return value;
    }
    let DefaultValue;
    ((DefaultValue2) => {
      DefaultValue2["NONE"] = "N/A";
    })(DefaultValue || (DefaultValue = {}));
    const phone = ref(initialValue((_a = props.userInfo) == null ? void 0 : _a.phone));
    let phoneCopy = phone.value;
    let originalCountryCode = "";
    const phoneInputBox = ref();
    const controlContainer = ref();
    const { defaultCountryCode } = useDefaultCountryCode();
    let phoneInput;
    function showCountryCode() {
      var _a2;
      phoneInput = intlTelInput(phoneInputBox.value, {
        initialCountry: (_a2 = phoneInput == null ? void 0 : phoneInput.getSelectedCountryData().iso2) != null ? _a2 : defaultCountryCode.value,
        utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js",
        dropdownContainer: controlContainer.value,
        autoPlaceholder: "aggressive"
      });
    }
    watch(phoneInputBox, () => {
      showCountryCode();
    });
    function displayPhoneOnEdit() {
      if (phone.value === "N/A") {
        phone.value = "";
      } else {
        phone.value = phone.value.replace(`+${phoneInput == null ? void 0 : phoneInput.getSelectedCountryData().dialCode}`, "");
      }
    }
    function onEdit() {
      if (phoneInput) {
        originalCountryCode = phoneInput.getSelectedCountryData().iso2;
      }
      displayPhoneOnEdit();
    }
    function cancel() {
      return __async(this, null, function* () {
        updatePhoneError.value = "";
        phone.value = phoneCopy;
        if (phoneInput) {
          phoneInput.setCountry(originalCountryCode);
          phone.value = phone.value.replace(`+${phoneInput == null ? void 0 : phoneInput.getSelectedCountryData().dialCode}`, "");
        }
      });
    }
    function handlePhoneInputRequest(inputPhone, userPhone) {
      return __async(this, null, function* () {
        if (phoneInput) {
          const formattedInputPhone = phoneInput == null ? void 0 : phoneInput.getNumber();
          if (formattedInputPhone && !(phoneInput == null ? void 0 : phoneInput.isValidNumber())) {
            updatePhoneError.value = t("invalid-phone");
            return false;
          }
          if (userPhone === formattedInputPhone) {
            return false;
          }
          if (formattedInputPhone) {
            const allowedIdentifier = yield identifierExists(formattedInputPhone).catch(() => {
              updatePhoneError.value = t("something-went-wrong");
              updatePending.value = false;
            });
            if (updatePhoneError.value) {
              return false;
            }
            if (!allowedIdentifier) {
              updatePhoneError.value = t("phone-number-already-in-use");
              return false;
            }
          }
          if (userPhone !== formattedInputPhone) {
            yield changePhoneRequest(formattedInputPhone);
            if (updatePhoneError.value === "") {
              context.emit("globalMessage", updateInfoMessage.value);
              phoneCopy = inputPhone;
              return true;
            }
            return false;
          }
        }
        return false;
      });
    }
    function setEmptyStrings() {
      if (!phone.value.trim()) {
        phone.value = "N/A";
      }
    }
    function save() {
      return __async(this, null, function* () {
        var _a2, _b, _c, _d;
        const userPhone = (_b = (_a2 = props.userInfo) == null ? void 0 : _a2.phone) != null ? _b : "";
        const inputPhone = phone.value === "N/A" ? "" : phone.value;
        updatePhoneError.value = "";
        if (props.required && !((_c = phoneInput == null ? void 0 : phoneInput.getNumber()) != null ? _c : "")) {
          updatePhoneError.value = t("phone-number-is-required");
          return false;
        }
        if (userPhone === ((_d = phoneInput == null ? void 0 : phoneInput.getNumber()) != null ? _d : "")) {
          setEmptyStrings();
          return true;
        }
        yield handlePhoneInputRequest(inputPhone, userPhone);
        if (!updatePhoneError.value) {
          setEmptyStrings();
          return true;
        }
        return false;
      });
    }
    return {
      isEditing,
      phone,
      controlContainer,
      phoneInputBox,
      cancel,
      save,
      onEdit,
      updatePhoneError,
      updatePending,
      title,
      t
    };
  }
});
const _hoisted_1$5 = ["readonly"];
const _hoisted_2$3 = {
  ref: "controlContainer",
  style: { "width": "100%" }
};
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_loading = resolveComponent("loading");
  const _component_editable_control = resolveComponent("editable-control");
  return openBlock(), createElementBlock(Fragment, null, [
    _ctx.updatePending ? (openBlock(), createBlock(_component_loading, {
      key: 0,
      active: _ctx.updatePending
    }, null, 8, ["active"])) : createCommentVNode("", true),
    createVNode(_component_editable_control, {
      title: _ctx.title,
      isEditing: _ctx.isEditing,
      "onUpdate:isEditing": _cache[2] || (_cache[2] = ($event) => _ctx.isEditing = $event),
      errorMessage: _ctx.updatePhoneError,
      onEditStart: _ctx.onEdit,
      onCancel: _ctx.cancel,
      onSave: _ctx.save,
      editable: !!_ctx.userInfo && _ctx.editable
    }, {
      default: withCtx(() => [
        withDirectives(createBaseVNode("input", {
          type: "text",
          id: "phone",
          class: normalizeClass(["input short", { "is-danger": _ctx.updatePhoneError }]),
          part: "input",
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.phone = $event),
          readonly: !_ctx.isEditing,
          onInput: _cache[1] || (_cache[1] = ($event) => _ctx.updatePhoneError = ""),
          ref: "phoneInputBox",
          inputmode: "tel",
          autocomplete: "tel",
          "data-test": "profile-phone-input"
        }, null, 42, _hoisted_1$5), [
          [vModelText, _ctx.phone]
        ]),
        createBaseVNode("div", _hoisted_2$3, null, 512)
      ]),
      _: 1
    }, 8, ["title", "isEditing", "errorMessage", "onEditStart", "onCancel", "onSave", "editable"])
  ], 64);
}
var PhoneNumber = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$2]]);
const _sfc_main$5 = defineComponent({
  name: "Phone Number",
  components: {
    EditableControl
  },
  props: {
    userInfo: {
      type: Object,
      required: false
    },
    required: {
      type: Boolean,
      required: true
    },
    editable: {
      type: Boolean,
      required: true
    }
  },
  emits: ["globalMessage"],
  setup(props, context) {
    var _a;
    const { t } = useLocale();
    const isEditing = ref(false);
    const { changeEmailRequest, updateInfoMessage, updateEmailError, updatePending, identifierExists } = useUpdateUser();
    const title = computed(() => {
      const translated = t("email");
      return translated.charAt(0).toUpperCase() + translated.slice(1);
    });
    function initialValue(value) {
      if (!value) {
        return DefaultValue.NONE;
      }
      return value;
    }
    let DefaultValue;
    ((DefaultValue2) => {
      DefaultValue2["NONE"] = "N/A";
    })(DefaultValue || (DefaultValue = {}));
    const email = ref(initialValue((_a = props.userInfo) == null ? void 0 : _a.email));
    let emailCopy = email.value;
    function displayEmailOnEdit() {
      if (email.value === "N/A") {
        email.value = "";
      }
    }
    function onEdit() {
      displayEmailOnEdit();
    }
    function cancel() {
      return __async(this, null, function* () {
        updateEmailError.value = "";
        email.value = emailCopy;
      });
    }
    function handleEmailInputRequest(inputEmail, userEmail) {
      return __async(this, null, function* () {
        if (userEmail !== inputEmail) {
          const formattedEmail = inputEmail.trim().toLowerCase();
          if (formattedEmail && !isEmail(email.value)) {
            updateEmailError.value = t("invalid-email");
            return false;
          }
          if (formattedEmail) {
            const allowedIdentifier = yield identifierExists(formattedEmail).catch(() => {
              updateEmailError.value = t("something-went-wrong");
              updatePending.value = false;
            });
            if (updateEmailError.value) {
              return false;
            }
            if (!allowedIdentifier) {
              updateEmailError.value = t("email-address-already-in-use");
              return false;
            }
          }
          yield changeEmailRequest(formattedEmail);
          if (updateEmailError.value === "") {
            context.emit("globalMessage", updateInfoMessage.value);
            emailCopy = inputEmail;
            return true;
          }
        }
        return false;
      });
    }
    function setEmptyStrings() {
      if (!email.value.trim()) {
        email.value = "N/A";
      }
    }
    function save() {
      return __async(this, null, function* () {
        var _a2, _b;
        const userEmail = (_b = (_a2 = props.userInfo) == null ? void 0 : _a2.email) != null ? _b : "";
        const inputEmail = email.value === "N/A" ? "" : email.value;
        updateEmailError.value = "";
        if (props.required && !inputEmail.trim()) {
          updateEmailError.value = t("email-is-required");
          return false;
        }
        if (userEmail === inputEmail.trim()) {
          setEmptyStrings();
          return true;
        }
        yield handleEmailInputRequest(inputEmail, userEmail);
        if (!updateEmailError.value) {
          setEmptyStrings();
          return true;
        }
        return false;
      });
    }
    return {
      isEditing,
      email,
      cancel,
      save,
      onEdit,
      updateEmailError,
      updatePending,
      title
    };
  }
});
const _hoisted_1$4 = ["readonly"];
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_loading = resolveComponent("loading");
  const _component_editable_control = resolveComponent("editable-control");
  return openBlock(), createElementBlock(Fragment, null, [
    _ctx.updatePending ? (openBlock(), createBlock(_component_loading, {
      key: 0,
      active: _ctx.updatePending
    }, null, 8, ["active"])) : createCommentVNode("", true),
    createVNode(_component_editable_control, {
      title: _ctx.title,
      isEditing: _ctx.isEditing,
      "onUpdate:isEditing": _cache[2] || (_cache[2] = ($event) => _ctx.isEditing = $event),
      errorMessage: _ctx.updateEmailError,
      onEditStart: _ctx.onEdit,
      onCancel: _ctx.cancel,
      onSave: _ctx.save,
      editable: !!_ctx.userInfo && _ctx.editable
    }, {
      default: withCtx(() => [
        withDirectives(createBaseVNode("input", {
          type: "text",
          class: normalizeClass(["input short", { "is-danger": _ctx.updateEmailError }]),
          part: "input",
          readonly: !_ctx.isEditing,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.email = $event),
          onInput: _cache[1] || (_cache[1] = ($event) => _ctx.updateEmailError = ""),
          inputmode: "email",
          autocomplete: "email",
          "data-test": "profile-email-input"
        }, null, 42, _hoisted_1$4), [
          [vModelText, _ctx.email]
        ])
      ]),
      _: 1
    }, 8, ["title", "isEditing", "errorMessage", "onEditStart", "onCancel", "onSave", "editable"])
  ], 64);
}
var Email = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$1]]);
const _sfc_main$4 = defineComponent({
  name: "UserInfo",
  components: {
    PhoneNumber,
    Email
  },
  props: {
    userInfo: {
      type: Object,
      required: false
    },
    appInfo: {
      type: Object,
      required: true
    }
  },
  setup(props) {
    const { t } = useLocale();
    const message = ref("");
    function globalMessage(recievedMessage) {
      message.value = recievedMessage;
    }
    const showEmail = computed(() => {
      return props.appInfo.allowed_identifier !== ue.phone;
    });
    const showPhone = computed(() => {
      return props.appInfo.allowed_identifier !== ue.email;
    });
    const emailRequired = computed(() => {
      return props.appInfo.required_identifier === le.Email || props.appInfo.required_identifier === le.Both;
    });
    const phoneRequired = computed(() => {
      return props.appInfo.required_identifier === le.Phone || props.appInfo.required_identifier === le.Both;
    });
    return {
      message,
      globalMessage,
      showEmail,
      showPhone,
      emailRequired,
      phoneRequired,
      t
    };
  }
});
const _hoisted_1$3 = { class: "title secondary-title" };
const _hoisted_2$2 = { key: 0 };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_email = resolveComponent("email");
  const _component_phone_number = resolveComponent("phone-number");
  return openBlock(), createElementBlock(Fragment, null, [
    createBaseVNode("div", _hoisted_1$3, toDisplayString(_ctx.t("login-info")), 1),
    createBaseVNode("div", {
      class: normalizeClass(["feedback", _ctx.message ? "feedback-info" : ""])
    }, [
      _ctx.message ? (openBlock(), createElementBlock("div", _hoisted_2$2, toDisplayString(_ctx.message), 1)) : createCommentVNode("", true)
    ], 2),
    _ctx.showEmail ? (openBlock(), createBlock(_component_email, {
      key: 0,
      userInfo: _ctx.userInfo,
      required: _ctx.emailRequired,
      editable: !!_ctx.appInfo.profile_management,
      onGlobalMessage: _ctx.globalMessage
    }, null, 8, ["userInfo", "required", "editable", "onGlobalMessage"])) : createCommentVNode("", true),
    _ctx.showPhone ? (openBlock(), createBlock(_component_phone_number, {
      key: 1,
      userInfo: _ctx.userInfo,
      required: _ctx.phoneRequired,
      editable: !!_ctx.appInfo.profile_management,
      onGlobalMessage: _ctx.globalMessage
    }, null, 8, ["userInfo", "required", "editable", "onGlobalMessage"])) : createCommentVNode("", true)
  ], 64);
}
var UserInfo = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render]]);
const _hoisted_1$2 = {
  class: "flex-row flex-end",
  style: { "margin-bottom": "30px" }
};
const _hoisted_2$1 = { class: "title secondary-title" };
const _hoisted_3$1 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_4$1 = {
  class: "flex-row",
  style: { "align-items": "center" }
};
const _hoisted_5 = {
  key: 0,
  class: "profile-table-icon-wrapper social"
};
const _hoisted_6 = { class: "profile-table-info" };
const _hoisted_7 = { class: "social-label" };
const _hoisted_8 = { class: "social-connection" };
const _hoisted_9 = { class: "social-identifier" };
const _hoisted_10 = { class: "profile-table-metadata" };
const _hoisted_11 = ["data-test"];
const _sfc_main$3 = defineComponent({
  __name: "SocialConnectionsTable",
  props: {
    userInfo: {}
  },
  setup(__props) {
    const props = __props;
    const { t } = useLocale();
    const { theme } = useTheme();
    const tableContainerRef = ref();
    const dataset = computed(() => {
      if (props.userInfo === void 0) {
        return [];
      }
      return Object.keys(props.userInfo.social_connections).map((connectionType) => {
        var _a;
        const metatdata = socialConnectionMetadata[connectionType];
        return __spreadProps(__spreadValues({}, ((_a = props.userInfo) == null ? void 0 : _a.social_connections)[connectionType]), {
          nameKey: metatdata.nameKey,
          icon: theme.value === Theme.Dark ? metatdata.icons.dark : metatdata.icons.light
        });
      });
    });
    const refreshing = ref(false);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: "table-container",
        ref_key: "tableContainerRef",
        ref: tableContainerRef
      }, [
        refreshing.value ? (openBlock(), createBlock(_sfc_main$9, {
          key: 0,
          active: refreshing.value
        }, null, 8, ["active"])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_1$2, [
          createBaseVNode("div", _hoisted_2$1, toDisplayString(unref(t)("my-social-connections")), 1),
          _hoisted_3$1
        ]),
        (openBlock(), createBlock(_sfc_main$a, {
          class: "passage-profile-table",
          dataset: dataset.value,
          columns: ["friendly_name"],
          isIconActionMenu: false,
          key: dataset.value.length
        }, {
          friendly_name: withCtx(({ item, index, isMobile, formatDateTime }) => [
            createBaseVNode("div", _hoisted_4$1, [
              !isMobile ? (openBlock(), createElementBlock("div", _hoisted_5, [
                createVNode(unref(InlineSvg), {
                  class: "profile-table-icon",
                  src: item.icon,
                  alt: "Social connection icon"
                }, null, 8, ["src"])
              ])) : createCommentVNode("", true),
              createBaseVNode("div", {
                class: normalizeClass(["profile-table-content social", { isMobile }])
              }, [
                createBaseVNode("div", _hoisted_6, [
                  createBaseVNode("div", _hoisted_7, [
                    createBaseVNode("div", _hoisted_8, [
                      createBaseVNode("strong", null, toDisplayString(unref(t)(item.nameKey)), 1)
                    ]),
                    createBaseVNode("div", _hoisted_9, toDisplayString(item.provider_identifier), 1)
                  ]),
                  createBaseVNode("div", _hoisted_10, [
                    createBaseVNode("span", {
                      "data-test": `passkey-table-row-${index}-device-date-added`
                    }, toDisplayString(`${unref(t)("added-time")}: ${formatDateTime(item.created_at)}`), 9, _hoisted_11)
                  ])
                ])
              ], 2)
            ])
          ]),
          _: 1
        }, 8, ["dataset"]))
      ], 512);
    };
  }
});
const _hoisted_1$1 = {
  key: 1,
  class: "notification is-danger has-text-centered"
};
const _hoisted_2 = {
  key: 3,
  class: "profile-divider"
};
const _hoisted_3 = {
  key: 5,
  class: "profile-divider"
};
const _hoisted_4 = {
  key: 7,
  class: "profile-divider"
};
const _sfc_main$2 = defineComponent({
  __name: "ProfileView",
  props: {
    appInfo: {},
    webauthnAllowed: { type: Boolean },
    passkeysEnabled: { type: Boolean }
  },
  setup(__props) {
    const props = __props;
    const { userInfo, loading, error, refreshDevices, refreshMetadata } = useCurrentUser(props.appInfo);
    const showSocialConnections = computed(() => {
      var _a, _b;
      const socialEnabled = Object.keys(props.appInfo.social_connections).length > 0;
      const userHasSocialConnections = Object.keys((_b = (_a = userInfo.value) == null ? void 0 : _a.social_connections) != null ? _b : {}).length > 0;
      return socialEnabled && userHasSocialConnections;
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        unref(loading) ? (openBlock(), createBlock(_sfc_main$9, {
          key: 0,
          active: unref(loading)
        }, null, 8, ["active"])) : unref(error) && unref(error).statusCode !== unref(b).PSGLoginRequired ? (openBlock(), createElementBlock("div", _hoisted_1$1, " Unable to get information about current user: " + toDisplayString(unref(error).statusText), 1)) : createCommentVNode("", true),
        !unref(loading) ? (openBlock(), createBlock(UserInfo, {
          key: 2,
          userInfo: unref(userInfo),
          appInfo: _ctx.appInfo
        }, null, 8, ["userInfo", "appInfo"])) : createCommentVNode("", true),
        _ctx.appInfo.layouts.profile.length > 0 ? (openBlock(), createElementBlock("div", _hoisted_2)) : createCommentVNode("", true),
        !unref(loading) && _ctx.appInfo.layouts.profile.length > 0 ? (openBlock(), createBlock(MetadataSection, {
          key: 4,
          appInfo: _ctx.appInfo,
          userInfo: unref(userInfo),
          refreshMetadata: unref(refreshMetadata)
        }, null, 8, ["appInfo", "userInfo", "refreshMetadata"])) : createCommentVNode("", true),
        showSocialConnections.value ? (openBlock(), createElementBlock("div", _hoisted_3)) : createCommentVNode("", true),
        !unref(loading) && showSocialConnections.value ? (openBlock(), createBlock(_sfc_main$3, {
          key: 6,
          userInfo: unref(userInfo)
        }, null, 8, ["userInfo"])) : createCommentVNode("", true),
        _ctx.passkeysEnabled ? (openBlock(), createElementBlock("div", _hoisted_4)) : createCommentVNode("", true),
        !unref(loading) && _ctx.passkeysEnabled ? (openBlock(), createBlock(_sfc_main$b, {
          key: 8,
          userInfo: unref(userInfo),
          refreshDevices: unref(refreshDevices),
          webauthnAllowed: _ctx.webauthnAllowed
        }, null, 8, ["userInfo", "refreshDevices", "webauthnAllowed"])) : createCommentVNode("", true)
      ], 64);
    };
  }
});
const _hoisted_1 = {
  key: 1,
  class: "notification is-danger has-text-centered"
};
const _sfc_main$1 = defineComponent({
  __name: "MainView",
  setup(__props) {
    const { appInfo, loading: appInfoLoading, invalidAppId, passage } = useAppInfo();
    const { webauthnAllowed, passkeysEnabled, initialized } = useSetupWebauthn(appInfo, passage);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        unref(appInfoLoading) || !unref(initialized) ? (openBlock(), createBlock(_sfc_main$9, {
          key: 0,
          active: unref(appInfoLoading) || !unref(initialized)
        }, null, 8, ["active"])) : unref(invalidAppId) ? (openBlock(), createElementBlock("div", _hoisted_1, " Passage-Profile Error: Invalid App ID. ")) : createCommentVNode("", true),
        unref(appInfo) && unref(initialized) ? (openBlock(), createBlock(_sfc_main$2, {
          key: 2,
          appInfo: unref(appInfo),
          webauthnAllowed: unref(webauthnAllowed),
          passkeysEnabled: unref(passkeysEnabled)
        }, null, 8, ["appInfo", "webauthnAllowed", "passkeysEnabled"])) : createCommentVNode("", true)
      ], 64);
    };
  }
});
const _sfc_main = defineComponent({
  __name: "Profile.ce",
  props: {
    appId: {},
    lang: {},
    defaultCountryCode: {},
    tokenStore: {},
    theme: {}
  },
  setup(__props) {
    const props = __props;
    const { languageLoading, containerRef, currentTheme } = useProfileElementSetup(props);
    return (_ctx, _cache) => {
      return withDirectives((openBlock(), createElementBlock("div", {
        id: "passage-profile-container",
        class: normalizeClass(["passage-profile", unref(currentTheme)]),
        ref_key: "containerRef",
        ref: containerRef
      }, [
        (openBlock(), createBlock(_sfc_main$1, { key: _ctx.appId }))
      ], 2)), [
        [vShow, !unref(languageLoading)]
      ]);
    };
  }
});
function registerPassageLoginElement() {
  safelyRegisterElement(_sfc_main, "profile");
}
registerPassageLoginElement();
export { registerPassageLoginElement };
//# 
