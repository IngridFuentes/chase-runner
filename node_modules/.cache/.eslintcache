[{"/Users/ingridf/Documents/chase-runner/src/index.js":"1","/Users/ingridf/Documents/chase-runner/src/App.js":"2","/Users/ingridf/Documents/chase-runner/src/components/banner.js":"3","/Users/ingridf/Documents/chase-runner/src/views/Goals.jsx":"4","/Users/ingridf/Documents/chase-runner/src/views/NewRun.jsx":"5","/Users/ingridf/Documents/chase-runner/src/views/Stats.jsx":"6","/Users/ingridf/Documents/chase-runner/src/hooks/useCurrentUser.js":"7","/Users/ingridf/Documents/chase-runner/src/components/SimpleMap.js":"8","/Users/ingridf/Documents/chase-runner/src/hooks/useAuthStatus.js":"9","/Users/ingridf/Documents/chase-runner/src/views/Dashboard.jsx":"10","/Users/ingridf/Documents/chase-runner/src/views/Home.jsx":"11","/Users/ingridf/Documents/chase-runner/src/hooks/useGeoLocation.js":"12","/Users/ingridf/Documents/chase-runner/src/views/AddRun.jsx":"13","/Users/ingridf/Documents/chase-runner/src/views/SavedPinnedPlaces.jsx":"14","/Users/ingridf/Documents/chase-runner/src/components/Banner.js":"15","/Users/ingridf/Documents/chase-runner/src/views/SearchFilter.jsx":"16","/Users/ingridf/Documents/chase-runner/src/views/Map.jsx":"17","/Users/ingridf/Documents/chase-runner/src/hooks/useMapData.js":"18","/Users/ingridf/Documents/chase-runner/src/views/StatsPopup.jsx":"19","/Users/ingridf/Documents/chase-runner/src/views/Login.jsx":"20"},{"size":259,"mtime":1699420845344,"results":"21","hashOfConfig":"22"},{"size":1181,"mtime":1702515850761,"results":"23","hashOfConfig":"22"},{"size":1266,"mtime":1699418653741,"results":"24","hashOfConfig":"22"},{"size":92,"mtime":1698030524612,"results":"25","hashOfConfig":"22"},{"size":3951,"mtime":1699642167732,"results":"26","hashOfConfig":"22"},{"size":729,"mtime":1699665057591,"results":"27","hashOfConfig":"22"},{"size":1106,"mtime":1698704390175,"results":"28","hashOfConfig":"22"},{"size":2784,"mtime":1698779897878,"results":"29","hashOfConfig":"22"},{"size":1249,"mtime":1697917604270,"results":"30","hashOfConfig":"22"},{"size":1153,"mtime":1702518602625,"results":"31","hashOfConfig":"22"},{"size":357,"mtime":1702516895802,"results":"32","hashOfConfig":"22"},{"size":1011,"mtime":1698764996550,"results":"33","hashOfConfig":"22"},{"size":2911,"mtime":1699387872495,"results":"34","hashOfConfig":"22"},{"size":991,"mtime":1699244648591,"results":"35","hashOfConfig":"22"},{"size":1499,"mtime":1702517169546,"results":"36","hashOfConfig":"22"},{"size":379,"mtime":1699595282546,"results":"37","hashOfConfig":"22"},{"size":9122,"mtime":1702519491298,"results":"38","hashOfConfig":"22"},{"size":10328,"mtime":1702432310217,"results":"39","hashOfConfig":"22"},{"size":873,"mtime":1699667709989,"results":"40","hashOfConfig":"22"},{"size":445,"mtime":1702516722725,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"jvtu1t",{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"45"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"45"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"45"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ingridf/Documents/chase-runner/src/index.js",[],[],[],"/Users/ingridf/Documents/chase-runner/src/App.js",["110"],[],"/Users/ingridf/Documents/chase-runner/src/components/banner.js",[],[],"/Users/ingridf/Documents/chase-runner/src/views/Goals.jsx",[],[],"/Users/ingridf/Documents/chase-runner/src/views/NewRun.jsx",["111"],[],"import { useState, useEffect } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport styles from '../styles/NewRun.module.css';\nimport SearchFilter from \"./SearchFilter\";\nimport { Link } from 'react-router-dom';\n\n\nconst NewRun = () => {\n    const [race, setRace] = useState([]);\n    const [buttonClicked, setButtonClicked] = useState(false);\n    const [searchText, setSearchText] = useState('');\n    // const [stateLocation, setStateLocation] = useState(\"\");\n    // const [eventType, setEventType] = useState(\"\");\n\n    const fetchEventData = async () => {\n        try {\n            const response = await fetch('http://www.RunReg.com/api/search/', {\n            }, {\n                mode: \"no-cors\"\n            })\n            const data = await response.json();\n            setRace(data.MatchingEvents || []);\n            console.log(data.MatchingEvents, 'data')\n        } catch (error) {\n            console.error(error);\n        }\n    };\n// console.log(fetchEventData(), 'fetch')\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        fetchEventData();\n        setButtonClicked(true);\n    };\n\n    const handleSearchChange = (text) => {\n        setSearchText(text);\n        const filteredData = race.filter((event) => event.EventState.toLowerCase().includes(text.toLowerCase()))\n        setRace(filteredData)\n    };\n\n    return (\n        <div className={styles.newrunSearch}>\n            <Link to=\"/dashboard\"className={styles.link}>Go to dashboard</Link>\n            { !buttonClicked && ( \n            <form onSubmit={handleSubmit}>\n                <label>\n                    <button type=\"submit\">Show List of Runs</button>\n                </label>\n            </form>\n            )}\n            {buttonClicked && (\n            <SearchFilter value={searchText} onChange={handleSearchChange}/>\n            )}\n            <Container>\n                <div className={styles.results}>\n                        {race.map((event, index) => (\n                                // console.log(event.EventCity, \"e\")\n                            <Row key={index}> \n                                        <Col md={2}>\n                                            <div> City: </div>\n                                            {event.EventCity}\n                                        </Col>\n                                        <Col md={2}>\n                                            <div >State:</div>\n                                            {event.EventState}\n                                        <br/>\n                                        </Col>\n                                        <Col md={4}>\n                                            Category:\n                                            {event.Categories.map((e, i) => (\n                                            <div key={i}>{e.CategoryName}</div>\n                                            ))}\n                                        <br/>\n                                        </Col>\n                                        <Col md={2}>\n                                            <div className={styles.columnHeader}>Distance:</div>\n                                            {event.Categories.map((e, i) => (\n                                            <div key={i}>{e.Distance}</div>\n                                            ))}\n                                        <br/>\n                                        </Col>\n                                        <Col md={2}>\n                                          <button> <a href={event.EventUrl} target=\"_blank\" rel=\"noreferrer\"> Sign up </a> </button>\n                                        <br/>\n                                        </Col>\n                            </Row>\n                        ))}\n                </div>\n            </Container>\n        </div>\n    )\n};\n\nexport default NewRun;","/Users/ingridf/Documents/chase-runner/src/views/Stats.jsx",["112"],[],"import React, { useState, useEffect } from 'react';\nimport StatsPopup from './StatsPopup';\nimport useMapData from '../hooks/useMapData';\n\nconst Stats = () => {\n    const {\n        savedPlaces: marathonStats,\n        fetchSavedPlaces,\n    } = useMapData();\n\n    const [isPopupOpen, setPopupOpen] = useState(false);\n    \n    useEffect(() => {\n        fetchSavedPlaces();\n    }, [fetchSavedPlaces]);\n    \n    const handleOpenPopup = () => {\n        setPopupOpen(true);\n    };\n\n    const handleClosePopup = () =>{\n        setPopupOpen(false);\n    };\n\n    return (\n        <div onClick={handleOpenPopup}>\n            <StatsPopup marathonStats={marathonStats} onClose={handleClosePopup}/>\n        </div>\n    )\n};\n\nexport default Stats;","/Users/ingridf/Documents/chase-runner/src/hooks/useCurrentUser.js",[],[],"/Users/ingridf/Documents/chase-runner/src/components/SimpleMap.js",["113","114","115"],[],"import React, { useRef, useState } from \"react\";\n// import styles from '../styles/SimpleMap.module.css';\nimport image from '../image/pin.png';\nimport { MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\n// import { useGeolocated } from \"react-geolocated\";\nimport nextId from 'react-id-generator';\n\nconst SimpleMap = () => {\n    // const mapRef = useRef();    \n    // const [state, setState] = useState({\n    //   lat: 40.72683,\n    //   lng:  -73.943512,\n    //   locations: [{ lat: 40, lng: -73, id: 'hi' }],\n    // });\n\n    // const markers= [\n    //   {\n    //     geocode: [48.86, 2.3522]\n    //   },\n    //   {\n    //     geocode: [48.85, 2.3522]\n    //   },\n    //   {\n    //     geocode: [48.855, 2.34]\n    //   }\n    // ];\n\n\n    // const { coords} =\n    // useGeolocated({\n    //     positionOptions: {\n    //         enableHighAccuracy: false,\n    //     },\n    //     userDecisionTimeout: 5000,\n    // });\n    // console.log(coords, \"coords\")\n\n  //   const handleClick = (event) => {\n\t// \tconsole.log('clicked');\n\t// \tconsole.log(event);\n\t// \tconst coords = event.latlng;\n\t// \tconsole.log(coords);\n\t// \tconst obj = {\n\t// \t\tlat: coords.lat,\n\t// \t\tlng: coords.lng,\n\t// \t\tid: nextId(),\n\t// \t};\n\t// \tconst locations = [...state.locations, obj];\n\t// \tsetState({ ...state, locations, lat: coords.lat, lng: coords.lng });\n\t// \tconsole.log(state);\n\t// };\n\n  // const findMe = () => {\n\t// \tnavigator.geolocation.getCurrentPosition((position) => {\n\t// \t\tconsole.log(position, 'pos');\n\t// \t\tsetState({\n\t// \t\t\t...state,\n\t// \t\t\tlat: position.coords.latitude,\n\t// \t\t\tlng: position.coords.longitude,\n\t// \t\t});\n\t// \t});\n\t// };\n\n\t// console.log(state);\n\n  const customIcon = new Icon({\n    iconUrl: image,\n    iconSize: [38, 38]\n  });\n\n    return ( \n      <div> \n      {/* // Make sure you set the height and width of the map container otherwise the map won't show */}\n        <MapContainer center={[48.8566, 2.356 ]} zoom={13} \n         style={{height: \"50vh\", width: \"50vw\"}} >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          /> \n          {/* {state.locations.length > 0 &&\n\t\t\t\t\tstate.locations.map((location) => ( */}\n          {/* {markers.map((marker) => (  */}\n        <MarkerClusterGroup> \n        \n\t\t\t\t\t\t<Marker\n\t\t\t\t\t\t\tposition={[48.86, 2.3522]}\n              icon={customIcon}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Popup>\n\t\t\t\t\t\t\t\tYou are here!\n\t\t\t\t\t\t\t</Popup>\n\t\t\t\t\t\t</Marker>\n        \n          </MarkerClusterGroup>\n          {/* ))} */}\n\t\t\t\t\t{/* ))} */}\n        </MapContainer>\n        </div>\n    );\n  };\n  \n  export default SimpleMap;","/Users/ingridf/Documents/chase-runner/src/hooks/useAuthStatus.js",[],[],"/Users/ingridf/Documents/chase-runner/src/views/Dashboard.jsx",["116"],[],"/Users/ingridf/Documents/chase-runner/src/views/Home.jsx",[],[],"/Users/ingridf/Documents/chase-runner/src/hooks/useGeoLocation.js",["117"],[],"/Users/ingridf/Documents/chase-runner/src/views/AddRun.jsx",["118","119","120","121","122"],[],"import { useState, useRef, useEffect } from \"react\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\n// import { SearchControl,  OpenStreetMapProvider } from 'leaflet-search';\nimport image from '../image/pin.png';\nimport 'leaflet/dist/leaflet.css';\nimport styles from '../styles/NewRun.module.css';\n\nconst states = ['AL','AK','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'];\nconst eventTypes = ['5K', '10K', 'Marathon', 'Fun Run', 'Road', 'Trail']\n\nconst stateCoordinates = { \n    AL: { latitude: 32.806671, longitude: -86.791130 },\n    AK: { latitude: 61.370716, longitude: -152.404419 },\n    NY: { latitude: 40.7128, longitude: -74.0060 }, // Coordinates for New York (NY)\n    // { lat: 34.0522, lng: -118.2437 }, // Coordinates for Los Angeles (CA)\n    // ... Add coordinates for other states\n};\n\n\nconst AddRun = () => {\n    const [stateLocation, setStateLocation] = useState('');\n    const [marker, setMarker] = useState(null);\n\n\n    const handleSelectChange = (e) => {\n        e.preventDefault();\n      const selectedState = e.target.value;\n      setStateLocation(selectedState);\n      console.log(stateCoordinates[selectedState])\n      if (stateCoordinates[selectedState]) {\n          setMarker({ ...stateCoordinates[selectedState], city: selectedState });\n        }\n    };\n      \n    const defaultIcon = L.icon({\n      iconUrl: image, // Specify the path to your marker icon\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n    });\n  console.log(marker, 'marker')\n    return (\n      <div className={styles.newrunSearch}>\n        <form onSubmit={handleSelectChange}>\n          <label>\n            Select your State:\n            <select value={stateLocation} onChange={handleSelectChange}>\n              <option value=\"\">Select your State</option>\n              {states.map((state) => (\n                <option key={state} value={state}>\n                  {state}\n                </option>\n              ))}\n            </select>\n          </label>\n        </form>\n  \n  \n        <MapContainer center={[37.7749, -122.4194]} zoom={13} style={{ height: '400px', width: '100%' }}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {marker && (\n            <Marker position={[marker.latitude, marker.longitude]} icon={defaultIcon}>\n              <Popup>{marker.city}</Popup>\n            </Marker>\n          )}\n\n        </MapContainer>\n     \n      </div>\n      )\n}\n\nexport default AddRun;","/Users/ingridf/Documents/chase-runner/src/views/SavedPinnedPlaces.jsx",["123"],[],"/Users/ingridf/Documents/chase-runner/src/components/Banner.js",["124","125","126"],[],"/Users/ingridf/Documents/chase-runner/src/views/SearchFilter.jsx",[],[],"/Users/ingridf/Documents/chase-runner/src/views/Map.jsx",["127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143"],[],"/Users/ingridf/Documents/chase-runner/src/hooks/useMapData.js",["144","145","146","147","148","149"],[],"import { useState, useEffect } from \"react\";\n\nconst useMapData = () => {\n    const [cityName, setCityName] = useState('');\n    const [country, setCountry] = useState('');\n    const [cityCoordinates, setCityCoordinates] = useState(null);\n    const [mapCenter, setMapCenter] = useState([39.106667, -94.676392]); // Default map center\n    const [savedPlaces, setSavedPlaces] = useState([]);\n    const [showConfetti, setShowConfetti] = useState(false);\n    const [suggestions, setSuggestions] = useState([]);\n    const [selectedCity, setSelectedCity] = useState(null);\n    const [selectedCityIndex, setSelectedCityIndex] = useState(-1);\n    // const [filteredData, setFilteredData] = useState(null)\n    const [data, setData] = useState({});\n\n\n      const debounce = (func, delay) => {\n        let timeoutId;\n        return function() {\n          const context = this;\n          const args = arguments;\n          clearTimeout(timeoutId);\n          timeoutId = setTimeout(() => func.apply(context, args), delay);\n          console.log(timeoutId, 'time')\n        };\n      };\n   \n      const handleCitySearch = async (cityName) => {\n        try{\n          const response = await fetch(\n                  `https://api.geoapify.com/v1/geocode/search?text=${cityName}&lang=en&limit=10&type=city&apiKey=63f9e025a41e4c2eb7b9fea7f557a9b5`\n                );\n          const data = await response.json();\n          setData(data);\n          return data;\n        } \n        catch (error) {\n          console.error(error);\n          throw error;\n        }\n    \n      }\n      useEffect(() => {\n        if(cityName.trim().length >=3) {\n          const debouncedSearch = debounce(handleCitySearch, 1000);\n          debouncedSearch(cityName);\n        }\n      }, [cityName])\n\nconsole.log(data, 'data 2')\n\n    // const handleCitySearch = async (cityName) => {\n    //   try {\n    //   //   if (cityName.trim() === '') {\n    //   //     throw new Error('Text value cannot be empty!');\n    //   //   }\n    //     const response = await fetch(\n    //       `https://api.geoapify.com/v1/geocode/search?text=${cityName}&lang=en&limit=10&type=city&apiKey=63f9e025a41e4c2eb7b9fea7f557a9b5`\n    //     );\n    //     const data = await response.json();\n    //     console.log(data, 'data 1')\n    //     const filteredData = data.features\n    //     .map((d, i) => (\n    //       <li key={i}>\n    //         {d.properties.name !== undefined && d.properties.name !== \"\" ? d.properties.name : d.properties.city}, {d.properties.state}, {d.properties.country}\n    //       </li>\n    //     ));\n        \n    //     const latLonCountryArray = extractCityInfo(data.features);\n    \n    //     await Promise.all(\n    //       latLonCountryArray.map(async ({ lat, lon, country, cityName }) => {\n    //         try {\n    //           const res = await fetch('http://localhost:3000/api/places', {\n    //             method: 'POST',\n    //             headers: {\n    //               'Content-Type': 'application/json',\n    //             },\n    //             body: JSON.stringify({ lat, lon, name: cityName, country }),\n    //           });\n    \n    //           if (!res.ok) {\n    //             throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`);\n    //           }\n    //         } catch (error) {\n    //           console.error('Error in fetch:', error);\n    //           // Handle the error as needed\n    //         }\n    //       })\n    //     );\n    \n    //     setCityName('');\n    //     setFilteredData(filteredData);\n    //     // setShowConfetti(true);\n    \n    //     setTimeout(() => {\n    //       setShowConfetti(false);\n    //       fetchSavedPlaces();\n    //     }, 2000);\n    //     return filteredData.length > 0 ? filteredData : [<li key={0}>No matching cities</li>];\n    //   } catch (error) {\n    //     console.error(error);\n    //     throw error;\n    //   }\n    // };\n    // useEffect(() => {\n    //   handleCitySearch();\n    // }, [cityName]);\n\n\n    \n  //   const saveCityToBackend = async (cityData) => {\n  //     const { lat, lon, country, cityName } = extractCityInfo(selectedCity);\n\n  // try {\n  //   const res = await fetch('http://localhost:3000/api/places', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify({ lat, lon, name: cityName, country }),\n  //   });\n\n  //   if (!res.ok) {\n  //     throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`);\n  //   }\n  // } catch (error) {\n  //   console.error('Error in saveCityToBackend:', error);\n  //   // Handle the error as needed\n  // }\n  //   };\n    const extractCityInfo = (cityData) => {\n      console.log(cityData, 'city')\n      return cityData.map(({ properties }) => {\n        const { lat, lon, country, name: cityName } = properties;\n        return {\n          lat,\n          lon,\n          country,\n          cityName,\n        };\n      });\n    };    \n\n    // const handleSuggestionClick = (city) => {\n    //   setSelectedCity(city);\n    //   setCityName(''); // Clear the cityName to reset the search input\n    //   setSuggestions([]); // Clear the suggestions\n    //   // saveCityToBackend(city);\n    // };\n  \n        // try {\n        //   const response = await fetch(\n        //     `https://api.geoapify.com/v1/geocode/search?text=${cityName}&lang=en&limit=10&type=city&apiKey=63f9e025a41e4c2eb7b9fea7f557a9b5`\n        //   );\n        //   const data = await response.json();\n        //   const filteredData = data.features.filter((d) => d.properties.name !== undefined)\n        //                     .map((d, i) =>\n        //                     // console.log(d.properties)\n        //                         <li key={i}>\n        //                            {d.properties.name}, \n        //                             {d.properties.country}\n        //                         </li>\n        //                     );\n        //   const latLonCountryArray = data.features.map((d, i) => ({\n        //                       lat: d.properties.lat,\n        //                       lon: d.properties.lon,\n        //                       country: d.properties.country,\n        //                       cityName: d.properties.name\n        //                     }));\n\n        //   await Promise.all(\n        //                       latLonCountryArray.map(async ({ lat, lon, country, cityName }) => {\n        //                         console.log('Lat:', lat, 'Lon:', lon, 'Country:', country, 'name:', cityName);\n                        \n        //                         // Use try-catch to handle errors in each fetch separately\n        //                         try {\n        //                           const res = await fetch('http://localhost:3000/api/places', {\n        //                             method: 'POST',\n        //                             headers: {\n        //                               'Content-Type': 'application/json',\n        //                             },\n        //                             body: JSON.stringify({ lat, lon, name: cityName, country }),\n        //                           });\n                        \n        //                           if (!res.ok) {\n        //                             throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`);\n        //                           }\n        //                         } catch (error) {\n        //                           console.error('Error in fetch:', error);\n        //                           // Handle the error as needed\n        //                         }\n        //                       })\n        //                     );\n        //                     setCityName('');\n        //                     setShowConfetti(true);\n                        \n        //                     setTimeout(() => {\n        //                       setShowConfetti(false);\n        //                       fetchSavedPlaces();\n        //                     }, 2000);\n                        \n        //                     return filteredData.length > 0 ? filteredData : <li>No matching cities</li>;\n        //                   } catch (error) {\n        //                     console.error(error);\n        //                     throw error;\n        //                   }\n        //                 };\n\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        handleCitySearch(cityName);\n    };\n\n    const handleSuggestionClick = async (selectedCity) => {\n        setCityName(selectedCity);\n        setSelectedCity(selectedCity);\n        setSuggestions([]);\n    }\n\n        //Fetch saved places from the backend\n    const fetchSavedPlaces = async () => {\n          try {\n              const response = await fetch('http://localhost:3000/api/places');\n              if(response.ok) {\n                const data = await response.json();\n                setSavedPlaces(data);\n                console.log(data, 'hi');\n              } else{\n                throw new Error('Network response was not ok.');\n              }\n            // const data = await response.json();\n            // console.log(data, 'backend data')\n            // setSavedPlaces(data);\n          } catch (error) {\n            console.error(error);\n          }\n        };\n\n    useEffect(() => {\n        fetchSavedPlaces();\n      }, []);\n\n  //   useEffect(()=> {\n  //     const search = async () => {\n  //       try {\n  //         const result = await handleCitySearch(cityName);\n  //         setSuggestions(result);\n  //         // setSuggestions([]);\n  //       } catch (error) {\n  //         console.error('Error:', error.message);\n  //       }\n  //     };\n  //     const timeoutId = setTimeout(() => {\n  //       search();\n  //     }, 300);\n  //     return () => clearTimeout(timeoutId);\n  // }, [cityName]);\n\n \n\n      return{\n        cityName,\n        setCityName,\n        selectedCity,\n        setSelectedCity,\n        country,\n        setCountry,\n        cityCoordinates,\n        mapCenter,\n        savedPlaces,\n        showConfetti,\n        handleCitySearch,\n        data,\n        handleSubmit,\n        suggestions,\n        handleSuggestionClick,\n        // handleKeyDown,\n        // selectedCityIndex,\n        // saveCityToBackend\n        // fetchCitiesFromAPI,\n        // fetchSavedPlaces,\n      }\n\n}\n\nexport default useMapData;",[],"/Users/ingridf/Documents/chase-runner/src/views/StatsPopup.jsx",["150","151"],[],"import React, { useState, useEffect } from 'react';\n\nconst StatsPopup = ({onClose, marathonStats}) => {\n    const[count, setCount] = useState({});\n\n    useEffect(() => {\n        const counts = marathonStats.reduce((acc, entry) => {\n            const country = entry.country;\n            if(country) {\n                acc[country] = (acc[country] || 0) + 1;\n            }\n\n            return acc;\n        }, {})\n        setCount(count);\n    }, [marathonStats]);\n\n    const country = marathonStats.map((e,index) =>(\n        e.country !== null && (\n            <li key={index}>\n            {e.country}\n            </li>\n        )\n    ));\n\n    return(\n        <div>\n            <div>\n                <button onClick={onClose}>X</button>\n                <h2>Your Stats</h2>\n                        {country}\n            </div>\n        </div>\n    )\n};\n\nexport default StatsPopup;","/Users/ingridf/Documents/chase-runner/src/views/Login.jsx",[],[],{"ruleId":"152","severity":1,"message":"153","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":14},{"ruleId":"152","severity":1,"message":"156","line":1,"column":20,"nodeType":"154","messageId":"155","endLine":1,"endColumn":29},{"ruleId":"152","severity":1,"message":"157","line":11,"column":12,"nodeType":"154","messageId":"155","endLine":11,"endColumn":23},{"ruleId":"152","severity":1,"message":"158","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":23},{"ruleId":"152","severity":1,"message":"159","line":1,"column":25,"nodeType":"154","messageId":"155","endLine":1,"endColumn":33},{"ruleId":"152","severity":1,"message":"160","line":8,"column":8,"nodeType":"154","messageId":"155","endLine":8,"endColumn":14},{"ruleId":"152","severity":1,"message":"161","line":9,"column":37,"nodeType":"154","messageId":"155","endLine":9,"endColumn":45},{"ruleId":"152","severity":1,"message":"162","line":1,"column":8,"nodeType":"154","messageId":"155","endLine":1,"endColumn":13},{"ruleId":"152","severity":1,"message":"158","line":1,"column":20,"nodeType":"154","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"156","line":1,"column":28,"nodeType":"154","messageId":"155","endLine":1,"endColumn":37},{"ruleId":"152","severity":1,"message":"163","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":26},{"ruleId":"152","severity":1,"message":"164","line":4,"column":28,"nodeType":"154","messageId":"155","endLine":4,"endColumn":49},{"ruleId":"152","severity":1,"message":"165","line":11,"column":7,"nodeType":"154","messageId":"155","endLine":11,"endColumn":17},{"ruleId":"152","severity":1,"message":"166","line":28,"column":13,"nodeType":"154","messageId":"155","endLine":28,"endColumn":19},{"ruleId":"152","severity":1,"message":"167","line":3,"column":8,"nodeType":"154","messageId":"155","endLine":3,"endColumn":14},{"ruleId":"152","severity":1,"message":"157","line":9,"column":12,"nodeType":"154","messageId":"155","endLine":9,"endColumn":23},{"ruleId":"152","severity":1,"message":"168","line":11,"column":11,"nodeType":"154","messageId":"155","endLine":11,"endColumn":26},{"ruleId":"152","severity":1,"message":"156","line":1,"column":27,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},{"ruleId":"152","severity":1,"message":"158","line":1,"column":38,"nodeType":"154","messageId":"155","endLine":1,"endColumn":44},{"ruleId":"152","severity":1,"message":"169","line":2,"column":8,"nodeType":"154","messageId":"155","endLine":2,"endColumn":14},{"ruleId":"152","severity":1,"message":"170","line":17,"column":5,"nodeType":"154","messageId":"155","endLine":17,"endColumn":17},{"ruleId":"152","severity":1,"message":"171","line":19,"column":5,"nodeType":"154","messageId":"155","endLine":19,"endColumn":12},{"ruleId":"152","severity":1,"message":"172","line":20,"column":5,"nodeType":"154","messageId":"155","endLine":20,"endColumn":15},{"ruleId":"152","severity":1,"message":"173","line":25,"column":5,"nodeType":"154","messageId":"155","endLine":25,"endColumn":22},{"ruleId":"152","severity":1,"message":"174","line":26,"column":5,"nodeType":"154","messageId":"155","endLine":26,"endColumn":17},{"ruleId":"152","severity":1,"message":"175","line":27,"column":5,"nodeType":"154","messageId":"155","endLine":27,"endColumn":16},{"ruleId":"152","severity":1,"message":"176","line":28,"column":5,"nodeType":"154","messageId":"155","endLine":28,"endColumn":18},{"ruleId":"152","severity":1,"message":"177","line":29,"column":5,"nodeType":"154","messageId":"155","endLine":29,"endColumn":22},{"ruleId":"152","severity":1,"message":"178","line":30,"column":5,"nodeType":"154","messageId":"155","endLine":30,"endColumn":19},{"ruleId":"152","severity":1,"message":"179","line":31,"column":5,"nodeType":"154","messageId":"155","endLine":31,"endColumn":26},{"ruleId":"152","severity":1,"message":"180","line":32,"column":5,"nodeType":"154","messageId":"155","endLine":32,"endColumn":22},{"ruleId":"152","severity":1,"message":"181","line":33,"column":5,"nodeType":"154","messageId":"155","endLine":33,"endColumn":21},{"ruleId":"152","severity":1,"message":"182","line":35,"column":5,"nodeType":"154","messageId":"155","endLine":35,"endColumn":23},{"ruleId":"152","severity":1,"message":"183","line":38,"column":10,"nodeType":"154","messageId":"155","endLine":38,"endColumn":22},{"ruleId":"152","severity":1,"message":"184","line":6,"column":29,"nodeType":"154","messageId":"155","endLine":6,"endColumn":47},{"ruleId":"152","severity":1,"message":"185","line":7,"column":23,"nodeType":"154","messageId":"155","endLine":7,"endColumn":35},{"ruleId":"152","severity":1,"message":"186","line":9,"column":26,"nodeType":"154","messageId":"155","endLine":9,"endColumn":41},{"ruleId":"152","severity":1,"message":"180","line":12,"column":12,"nodeType":"154","messageId":"155","endLine":12,"endColumn":29},{"ruleId":"152","severity":1,"message":"187","line":12,"column":31,"nodeType":"154","messageId":"155","endLine":12,"endColumn":51},{"ruleId":"152","severity":1,"message":"188","line":132,"column":11,"nodeType":"154","messageId":"155","endLine":132,"endColumn":26},{"ruleId":"152","severity":1,"message":"189","line":7,"column":15,"nodeType":"154","messageId":"155","endLine":7,"endColumn":21},{"ruleId":"190","severity":1,"message":"191","line":16,"column":8,"nodeType":"192","endLine":16,"endColumn":23,"suggestions":"193"},"no-unused-vars","'Banner' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'isPopupOpen' is assigned a value but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'nextId' is defined but never used.","'username' is assigned a value but never used.","'React' is defined but never used.","'GeoSearchControl' is defined but never used.","'OpenStreetMapProvider' is defined but never used.","'eventTypes' is assigned a value but never used.","'marker' is assigned a value but never used.","'Button' is defined but never used.","'handleOpenPopup' is assigned a value but never used.","'Select' is defined but never used.","'selectedCity' is assigned a value but never used.","'country' is assigned a value but never used.","'setCountry' is assigned a value but never used.","'handleInputSearch' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'suggestions' is assigned a value but never used.","'handleKeyDown' is assigned a value but never used.","'saveCityToBackend' is assigned a value but never used.","'setSuggestions' is assigned a value but never used.","'handleSuggestionClick' is assigned a value but never used.","'selectedCityIndex' is assigned a value but never used.","'handleCitySearch' is assigned a value but never used.","'fetchCitiesFromAPI' is assigned a value but never used.","'filteredData' is assigned a value but never used.","'setCityCoordinates' is assigned a value but never used.","'setMapCenter' is assigned a value but never used.","'setShowConfetti' is assigned a value but never used.","'setSelectedCityIndex' is assigned a value but never used.","'extractCityInfo' is assigned a value but never used.","'counts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array. You can also do a functional update 'setCount(c => ...)' if you only need 'count' in the 'setCount' call.","ArrayExpression",["194"],{"desc":"195","fix":"196"},"Update the dependencies array to be: [count, marathonStats]",{"range":"197","text":"198"},[443,458],"[count, marathonStats]"]