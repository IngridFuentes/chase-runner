[{"/Users/ingridf/Documents/chase-runner/src/index.js":"1","/Users/ingridf/Documents/chase-runner/src/App.js":"2","/Users/ingridf/Documents/chase-runner/src/components/banner.js":"3","/Users/ingridf/Documents/chase-runner/src/views/Goals.jsx":"4","/Users/ingridf/Documents/chase-runner/src/views/NewRun.jsx":"5","/Users/ingridf/Documents/chase-runner/src/views/Stats.jsx":"6","/Users/ingridf/Documents/chase-runner/src/hooks/useCurrentUser.js":"7","/Users/ingridf/Documents/chase-runner/src/components/SimpleMap.js":"8","/Users/ingridf/Documents/chase-runner/src/hooks/useAuthStatus.js":"9","/Users/ingridf/Documents/chase-runner/src/views/Dashboard.jsx":"10","/Users/ingridf/Documents/chase-runner/src/views/Home.jsx":"11","/Users/ingridf/Documents/chase-runner/src/hooks/useGeoLocation.js":"12","/Users/ingridf/Documents/chase-runner/src/views/AddRun.jsx":"13","/Users/ingridf/Documents/chase-runner/src/views/SavedPinnedPlaces.jsx":"14","/Users/ingridf/Documents/chase-runner/src/views/CityMap.jsx":"15","/Users/ingridf/Documents/chase-runner/src/components/Banner.js":"16","/Users/ingridf/Documents/chase-runner/src/views/SearchFilter.jsx":"17"},{"size":259,"mtime":1699420845344,"results":"18","hashOfConfig":"19"},{"size":1066,"mtime":1699418768516,"results":"20","hashOfConfig":"19"},{"size":1266,"mtime":1699418653741,"results":"21","hashOfConfig":"19"},{"size":92,"mtime":1698030524612,"results":"22","hashOfConfig":"19"},{"size":4165,"mtime":1699595151205,"results":"23","hashOfConfig":"19"},{"size":92,"mtime":1698030524612,"results":"24","hashOfConfig":"19"},{"size":1106,"mtime":1698704390175,"results":"25","hashOfConfig":"19"},{"size":2784,"mtime":1698779897878,"results":"26","hashOfConfig":"19"},{"size":1249,"mtime":1697917604270,"results":"27","hashOfConfig":"19"},{"size":1196,"mtime":1699418705076,"results":"28","hashOfConfig":"19"},{"size":245,"mtime":1697918056213,"results":"29","hashOfConfig":"19"},{"size":1011,"mtime":1698764996550,"results":"30","hashOfConfig":"19"},{"size":2911,"mtime":1699387872495,"results":"31","hashOfConfig":"19"},{"size":991,"mtime":1699244648591,"results":"32","hashOfConfig":"19"},{"size":3900,"mtime":1699416857540,"results":"33","hashOfConfig":"19"},{"size":1266,"mtime":1699418653741,"results":"34","hashOfConfig":"19"},{"size":379,"mtime":1699595282546,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jvtu1t",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ingridf/Documents/chase-runner/src/index.js",[],[],"/Users/ingridf/Documents/chase-runner/src/App.js",[],[],[],"/Users/ingridf/Documents/chase-runner/src/components/banner.js",[],[],"/Users/ingridf/Documents/chase-runner/src/views/Goals.jsx",[],[],"/Users/ingridf/Documents/chase-runner/src/views/NewRun.jsx",["92"],[],"/Users/ingridf/Documents/chase-runner/src/views/Stats.jsx",[],[],"/Users/ingridf/Documents/chase-runner/src/hooks/useCurrentUser.js",[],[],"/Users/ingridf/Documents/chase-runner/src/components/SimpleMap.js",["93","94","95"],[],"import React, { useRef, useState } from \"react\";\n// import styles from '../styles/SimpleMap.module.css';\nimport image from '../image/pin.png';\nimport { MapContainer, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport { Icon } from 'leaflet';\nimport MarkerClusterGroup from \"react-leaflet-cluster\";\n// import { useGeolocated } from \"react-geolocated\";\nimport nextId from 'react-id-generator';\n\nconst SimpleMap = () => {\n    // const mapRef = useRef();    \n    // const [state, setState] = useState({\n    //   lat: 40.72683,\n    //   lng:  -73.943512,\n    //   locations: [{ lat: 40, lng: -73, id: 'hi' }],\n    // });\n\n    // const markers= [\n    //   {\n    //     geocode: [48.86, 2.3522]\n    //   },\n    //   {\n    //     geocode: [48.85, 2.3522]\n    //   },\n    //   {\n    //     geocode: [48.855, 2.34]\n    //   }\n    // ];\n\n\n    // const { coords} =\n    // useGeolocated({\n    //     positionOptions: {\n    //         enableHighAccuracy: false,\n    //     },\n    //     userDecisionTimeout: 5000,\n    // });\n    // console.log(coords, \"coords\")\n\n  //   const handleClick = (event) => {\n\t// \tconsole.log('clicked');\n\t// \tconsole.log(event);\n\t// \tconst coords = event.latlng;\n\t// \tconsole.log(coords);\n\t// \tconst obj = {\n\t// \t\tlat: coords.lat,\n\t// \t\tlng: coords.lng,\n\t// \t\tid: nextId(),\n\t// \t};\n\t// \tconst locations = [...state.locations, obj];\n\t// \tsetState({ ...state, locations, lat: coords.lat, lng: coords.lng });\n\t// \tconsole.log(state);\n\t// };\n\n  // const findMe = () => {\n\t// \tnavigator.geolocation.getCurrentPosition((position) => {\n\t// \t\tconsole.log(position, 'pos');\n\t// \t\tsetState({\n\t// \t\t\t...state,\n\t// \t\t\tlat: position.coords.latitude,\n\t// \t\t\tlng: position.coords.longitude,\n\t// \t\t});\n\t// \t});\n\t// };\n\n\t// console.log(state);\n\n  const customIcon = new Icon({\n    iconUrl: image,\n    iconSize: [38, 38]\n  });\n\n    return ( \n      <div> \n      {/* // Make sure you set the height and width of the map container otherwise the map won't show */}\n        <MapContainer center={[48.8566, 2.356 ]} zoom={13} \n         style={{height: \"50vh\", width: \"50vw\"}} >\n          <TileLayer\n            attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          /> \n          {/* {state.locations.length > 0 &&\n\t\t\t\t\tstate.locations.map((location) => ( */}\n          {/* {markers.map((marker) => (  */}\n        <MarkerClusterGroup> \n        \n\t\t\t\t\t\t<Marker\n\t\t\t\t\t\t\tposition={[48.86, 2.3522]}\n              icon={customIcon}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Popup>\n\t\t\t\t\t\t\t\tYou are here!\n\t\t\t\t\t\t\t</Popup>\n\t\t\t\t\t\t</Marker>\n        \n          </MarkerClusterGroup>\n          {/* ))} */}\n\t\t\t\t\t{/* ))} */}\n        </MapContainer>\n        </div>\n    );\n  };\n  \n  export default SimpleMap;","/Users/ingridf/Documents/chase-runner/src/hooks/useAuthStatus.js",[],[],"/Users/ingridf/Documents/chase-runner/src/views/Dashboard.jsx",["96","97"],[],"// import {useCurrentUser} from '../hooks/useCurrentUser.js';\nimport {useAuthStatus} from '../hooks/useAuthStatus';\nimport styles from '../styles/Dashboard.module.css';\nimport SimpleMap from '../components/SimpleMap';\nimport AddRun from \"./AddRun\";\nimport CityMap from './CityMap';\n\n\nfunction Dashboard() {\n    const {isLoading, isAuthorized, username} = useAuthStatus();\n    // const {isLoading, isAuthorized, username} = useCurrentUser();\n\n\n    if (isLoading) {\n        return null;\n    }\n    const authorizedBody = \n    <>\n        Your username is: <b>{username}</b>\n    </>\n\n    const unauthorizedBody = \n    <>\n        You have not logged in and cannot view the dashboard.\n        <br/><br/>\n        <a href=\"/\" className={styles.link}>Login to continue.</a>\n    </>\n\n    return (\n        <div className={styles.dashboard}>\n            <div className={styles.title}>{isAuthorized ? 'Welcome!' : 'Unauthorized'}</div>\n            <div className={styles.message}>\n                { isAuthorized ? authorizedBody : unauthorizedBody }\n            </div>\n            {/* <SimpleMap /> */}\n            {/* <AddRun /> */}\n            <CityMap />\n\n        </div>\n    );\n\n}\n\nexport default Dashboard;","/Users/ingridf/Documents/chase-runner/src/views/Home.jsx",[],[],"/Users/ingridf/Documents/chase-runner/src/hooks/useGeoLocation.js",["98"],[],"/Users/ingridf/Documents/chase-runner/src/views/AddRun.jsx",["99","100","101","102","103"],[],"import { useState, useRef, useEffect } from \"react\";\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { GeoSearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\n// import { SearchControl,  OpenStreetMapProvider } from 'leaflet-search';\nimport image from '../image/pin.png';\nimport 'leaflet/dist/leaflet.css';\nimport styles from '../styles/NewRun.module.css';\n\nconst states = ['AL','AK','AZ','AR','CA','CO','CT','DE','FL','GA','HI','ID','IL','IN','IA','KS','KY','LA','ME','MD','MA','MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY'];\nconst eventTypes = ['5K', '10K', 'Marathon', 'Fun Run', 'Road', 'Trail']\n\nconst stateCoordinates = { \n    AL: { latitude: 32.806671, longitude: -86.791130 },\n    AK: { latitude: 61.370716, longitude: -152.404419 },\n    NY: { latitude: 40.7128, longitude: -74.0060 }, // Coordinates for New York (NY)\n    // { lat: 34.0522, lng: -118.2437 }, // Coordinates for Los Angeles (CA)\n    // ... Add coordinates for other states\n};\n\n\nconst AddRun = () => {\n    const [stateLocation, setStateLocation] = useState('');\n    const [marker, setMarker] = useState(null);\n\n\n    const handleSelectChange = (e) => {\n        e.preventDefault();\n      const selectedState = e.target.value;\n      setStateLocation(selectedState);\n      console.log(stateCoordinates[selectedState])\n      if (stateCoordinates[selectedState]) {\n          setMarker({ ...stateCoordinates[selectedState], city: selectedState });\n        }\n    };\n      \n    const defaultIcon = L.icon({\n      iconUrl: image, // Specify the path to your marker icon\n      iconSize: [25, 41],\n      iconAnchor: [12, 41],\n      popupAnchor: [1, -34],\n    });\n  console.log(marker, 'marker')\n    return (\n      <div className={styles.newrunSearch}>\n        <form onSubmit={handleSelectChange}>\n          <label>\n            Select your State:\n            <select value={stateLocation} onChange={handleSelectChange}>\n              <option value=\"\">Select your State</option>\n              {states.map((state) => (\n                <option key={state} value={state}>\n                  {state}\n                </option>\n              ))}\n            </select>\n          </label>\n        </form>\n  \n  \n        <MapContainer center={[37.7749, -122.4194]} zoom={13} style={{ height: '400px', width: '100%' }}\n        >\n          <TileLayer\n            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {marker && (\n            <Marker position={[marker.latitude, marker.longitude]} icon={defaultIcon}>\n              <Popup>{marker.city}</Popup>\n            </Marker>\n          )}\n\n        </MapContainer>\n     \n      </div>\n      )\n}\n\nexport default AddRun;","/Users/ingridf/Documents/chase-runner/src/views/SavedPinnedPlaces.jsx",["104"],[],"/Users/ingridf/Documents/chase-runner/src/views/CityMap.jsx",["105"],[],"import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet'; // Import Leaflet library\nimport image from '../image/pin.png';\nimport ConfettiExplosion from 'react-confetti-explosion';\nimport styles from '../styles/CityMap.module.css';\n\nconst CityMap = () => {\n  const [cityName, setCityName] = useState('');\n  const [cityCoordinates, setCityCoordinates] = useState(null);\n  const [mapCenter, setMapCenter] = useState([39.106667, -94.676392]); // Default map center\n  const [savedPlaces, setSavedPlaces] = useState([]);\n  const [showConfetti, setShowConfetti] = useState(false);\n\n  const handleCitySearch = async () => {\n    try {\n      const response = await fetch(\n        `https://api.geoapify.com/v1/geocode/search?text=${cityName}&lang=en&limit=10&type=city&apiKey=63f9e025a41e4c2eb7b9fea7f557a9b5`\n      );\n      const data = await response.json();\n        console.log(data.features[0].properties, 'data')\n        const { lat, lon } = data.features[0].properties;\n        setCityCoordinates({ lat, lon });\n\n    const res = await fetch('http://localhost:3000/api/places', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lat, lon, name: cityName  }),\n    });\n    if(!res.ok){\n        throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`)\n    }\n    setCityName('');\n    setShowConfetti(true);\n    setTimeout(() => {\n        setShowConfetti(false);\n      }, 2000);\n\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  useEffect(() => {\n    //Fetch saved places from the backend\n    const fetchSavedPlaces = async () => {\n      try {\n          const response = await fetch('http://localhost:3000/api/places');\n          if(response.ok) {\n            const data = await response.json();\n            setSavedPlaces(data);\n            console.log(data, 'hi');\n          } else{\n            throw new Error('Network response was not ok.');\n          }\n        // const data = await response.json();\n        // console.log(data, 'backend data')\n        // setSavedPlaces(data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchSavedPlaces();\n  }, []);\n\n  const customIcon = new L.Icon({\n    iconUrl: image,\n    iconSize: [25, 25], \n  });\n\n  return (\n    <div>\n          <div className={styles.input}>\n              <input\n                type=\"text\"\n                placeholder=\"Enter city name\"\n                value={cityName}\n                onChange={(e) => setCityName(e.target.value)}\n              />\n              <button onClick={handleCitySearch} className={styles.btn}>Add your run</button>\n          </div>\n          {showConfetti && <ConfettiExplosion \n                force={0.8}\n                duration={3000}\n                particleCount={400}\n                width={2000}\n                angle={120} \n                gravity={0.5}\n            />}\n      <MapContainer center={mapCenter} zoom={3} style={{ height: '400px', width: '100%' }}>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n          url='https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\n        />\n        {cityCoordinates && (\n          <Marker position={[cityCoordinates.lat, cityCoordinates.lon]} icon={customIcon}>\n            <Popup>{`Coordinates: ${cityCoordinates.lat}, ${cityCoordinates.lon}`}</Popup>\n          </Marker>\n        )}\n        {savedPlaces.map((place, index) => (\n          <Marker key={index} position={[place.lat, place.lon, place.name]} icon={customIcon}>\n            <Popup>{`Saved Place ${index + 1}: Coordinates - ${place.lat}, ${place.lon}, ${place.name}`}</Popup>\n          </Marker>\n        ))}\n         \n      </MapContainer>\n    </div>\n  );\n};\n\nexport default CityMap;\n\n","/Users/ingridf/Documents/chase-runner/src/components/Banner.js",[],[],"/Users/ingridf/Documents/chase-runner/src/views/SearchFilter.jsx",[],[],{"ruleId":"106","severity":1,"message":"107","line":1,"column":20,"nodeType":"108","messageId":"109","endLine":1,"endColumn":29},{"ruleId":"106","severity":1,"message":"110","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":23},{"ruleId":"106","severity":1,"message":"111","line":1,"column":25,"nodeType":"108","messageId":"109","endLine":1,"endColumn":33},{"ruleId":"106","severity":1,"message":"112","line":8,"column":8,"nodeType":"108","messageId":"109","endLine":8,"endColumn":14},{"ruleId":"106","severity":1,"message":"113","line":4,"column":8,"nodeType":"108","messageId":"109","endLine":4,"endColumn":17},{"ruleId":"106","severity":1,"message":"114","line":5,"column":8,"nodeType":"108","messageId":"109","endLine":5,"endColumn":14},{"ruleId":"106","severity":1,"message":"115","line":1,"column":8,"nodeType":"108","messageId":"109","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"110","line":1,"column":20,"nodeType":"108","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"106","severity":1,"message":"107","line":1,"column":28,"nodeType":"108","messageId":"109","endLine":1,"endColumn":37},{"ruleId":"106","severity":1,"message":"116","line":4,"column":10,"nodeType":"108","messageId":"109","endLine":4,"endColumn":26},{"ruleId":"106","severity":1,"message":"117","line":4,"column":28,"nodeType":"108","messageId":"109","endLine":4,"endColumn":49},{"ruleId":"106","severity":1,"message":"118","line":11,"column":7,"nodeType":"108","messageId":"109","endLine":11,"endColumn":17},{"ruleId":"106","severity":1,"message":"119","line":28,"column":13,"nodeType":"108","messageId":"109","endLine":28,"endColumn":19},{"ruleId":"106","severity":1,"message":"120","line":11,"column":21,"nodeType":"108","messageId":"109","endLine":11,"endColumn":33},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'useState' is defined but never used.","'nextId' is defined but never used.","'SimpleMap' is defined but never used.","'AddRun' is defined but never used.","'React' is defined but never used.","'GeoSearchControl' is defined but never used.","'OpenStreetMapProvider' is defined but never used.","'eventTypes' is assigned a value but never used.","'marker' is assigned a value but never used.","'setMapCenter' is assigned a value but never used."]