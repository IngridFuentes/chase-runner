{"ast":null,"code":"import { resetNewRunForm } from './newRun';\nexport const clearRuns = () => {\n  return {\n    type: \"CLEAR_MY_RUN\"\n  };\n};\nexport const addRun = run => {\n  return {\n    type: \"ADD_RUN\",\n    run\n  };\n};\nexport const updateRunSuccess = run => {\n  return {\n    type: \"UPDATE_RUN\",\n    run\n  };\n};\nexport const deleteRunSuccess = runId => {\n  return {\n    type: \"DELETE_RUN\",\n    runId\n  };\n};\nexport const fetchRuns = () => {\n  return dispatch => {\n    // debugger\n    // dispatch({type: 'LOADING_JOB_APPLICATIONS'});\n    // console.log('inside fetch job applications')\n    return fetch('http://localhost:3001/api/v1/runs', {\n      credentials: \"include\",\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"run/json\"\n      }\n    }).then(resp => {\n      return resp.json();\n    })\n    // .then(data => console.log(data))\n    .then(runs => {\n      dispatch({\n        type: \"ADD_RUNS\",\n        payload: runs\n      });\n    });\n  };\n};\nexport const createRun = (runData, history) => {\n  return dispatch => {\n    const getBackRunData = {\n      run: {\n        run_date: runData.runDate,\n        city: runData.city,\n        state: runData.state,\n        country: runData.country,\n        number_marathon: runData.numberMarathon,\n        notes: runData.notes,\n        user_id: runData.userId\n      }\n    };\n    return fetch('http://localhost:3001/api/v1/runs', {\n      credentials: \"include\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"run/json\"\n      },\n      body: JSON.stringify(getBackRunData)\n    }).then(response => response.json()).then(response => {\n      console.log('I am here on function createJobApplication');\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(addRun(response));\n        dispatch(resetNewRunForm());\n        history.push(`/runs/${response.id}`);\n      }\n    });\n  };\n};\nexport const updateRun = (runData, history) => {\n  return dispatch => {\n    const getBackRunData = {\n      run: {\n        run_date: runData.runDate,\n        city: runData.city,\n        state: runData.state,\n        country: runData.country,\n        number_marathon: runData.numberMarathon,\n        notes: runData.notes\n      }\n    };\n    return fetch(`http://localhost:3001/api/v1/job_applications/${runData.runId}`, {\n      credentials: \"include\",\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"run/json\"\n      },\n      body: JSON.stringify(getBackRunData)\n    }).then(response => response.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(updateRunSuccess(response));\n        history.push(`/runs/${response.id}`);\n      }\n    });\n  };\n};\nexport const deleteRun = (runId, history) => {\n  return dispatch => {\n    return fetch(`http://localhost:3001/api/v1/runs/${runId}`, {\n      credentials: \"include\",\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"run/json\"\n      }\n    }).then(response => response.json()).then(response => {\n      if (response.error) {\n        alert(response.error);\n      } else {\n        dispatch(deleteRunSuccess(runId));\n        history.push(\"/profile\");\n      }\n    });\n  };\n};","map":{"version":3,"names":["resetNewRunForm","clearRuns","type","addRun","run","updateRunSuccess","deleteRunSuccess","runId","fetchRuns","dispatch","fetch","credentials","method","headers","then","resp","json","runs","payload","createRun","runData","history","getBackRunData","run_date","runDate","city","state","country","number_marathon","numberMarathon","notes","user_id","userId","body","JSON","stringify","response","console","log","error","alert","push","id","updateRun","deleteRun"],"sources":["/Users/ingridf/Documents/chase-runner/src/actions/fetchRuns.js"],"sourcesContent":["import { resetNewRunForm } from './newRun'\n\nexport const clearRuns = () => {\n    return {\n        type: \"CLEAR_MY_RUN\"\n    }\n}\n\nexport const addRun = run => {\n    return {\n        type: \"ADD_RUN\",\n        run\n    }\n}\n\nexport const updateRunSuccess = run => {\n    return {\n        type: \"UPDATE_RUN\",\n        run\n    }\n}\n\nexport const deleteRunSuccess = runId => {\n    return {\n        type: \"DELETE_RUN\",\n        runId\n    }\n}\n\n\nexport const fetchRuns = () =>  {\n    return (dispatch) => {\n        // debugger\n        // dispatch({type: 'LOADING_JOB_APPLICATIONS'});\n        // console.log('inside fetch job applications')\n        return fetch('http://localhost:3001/api/v1/runs', {\n            credentials: \"include\",\n            method: 'GET',\n            headers: {\n                \"Content-Type\": \"run/json\"\n            },\n        })\n        .then(resp => {return resp.json()})\n        // .then(data => console.log(data))\n        .then(runs => { dispatch({ type: \"ADD_RUNS\", payload: runs})})\n    };\n}\n\nexport const createRun = (runData, history ) => {\n    return dispatch => {\n        const getBackRunData = {\n            run: {\n                run_date: runData.runDate,\n                city: runData.city,\n                state: runData.state,\n                country: runData.country,\n                number_marathon: runData.numberMarathon,\n                notes: runData.notes,\n                user_id: runData.userId\n            }\n        }\n\n        return fetch('http://localhost:3001/api/v1/runs', {\n            credentials: \"include\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"run/json\"\n            },\n            body: JSON.stringify(getBackRunData)\n        })\n        .then(response => response.json())\n        .then(response => {\n            console.log('I am here on function createJobApplication')\n            if (response.error) {\n                alert(response.error)\n            } else {\n                dispatch(addRun(response))\n                dispatch(resetNewRunForm())\n                history.push(`/runs/${response.id}`)\n            }\n        })\n    }\n}\n\nexport const  updateRun = (runData, history ) => {\n\n        return dispatch => {\n    \n            const getBackRunData = {\n                run: {\n                    run_date: runData.runDate,\n                    city: runData.city,\n                    state: runData.state,\n                    country: runData.country,\n                    number_marathon: runData.numberMarathon,\n                    notes: runData.notes\n                }\n            }\n    \n            return fetch(`http://localhost:3001/api/v1/job_applications/${runData.runId}`, {\n                credentials: \"include\",\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"run/json\"\n                },\n                body: JSON.stringify(getBackRunData)\n            })\n            .then(response => response.json())\n            .then(response => {\n                if (response.error) {\n                    alert(response.error)\n                } else {\n                    dispatch(updateRunSuccess(response))\n                    history.push(`/runs/${response.id}`)\n                }\n            })\n    \n        }\n}\n\n\nexport const deleteRun = (runId, history) => {\n\n    return dispatch => {\n\n        return fetch(`http://localhost:3001/api/v1/runs/${runId}`, {\n            credentials: \"include\",\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"run/json\"\n            },\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.error) {\n                alert(response.error)\n            } else {\n                dispatch(deleteRunSuccess(runId))\n                history.push(\"/profile\")\n            }\n        })\n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}